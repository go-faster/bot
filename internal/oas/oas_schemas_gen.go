// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Error description.
// Ref: #/components/schemas/Error
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Status.
// Ref: #/components/schemas/Status
type Status struct {
	// Status.
	Status StatusStatus `json:"status"`
	// Message.
	Message OptString `json:"message"`
}

// GetStatus returns the value of Status.
func (s *Status) GetStatus() StatusStatus {
	return s.Status
}

// GetMessage returns the value of Message.
func (s *Status) GetMessage() OptString {
	return s.Message
}

// SetStatus sets the value of Status.
func (s *Status) SetStatus(val StatusStatus) {
	s.Status = val
}

// SetMessage sets the value of Message.
func (s *Status) SetMessage(val OptString) {
	s.Message = val
}

// Status.
type StatusStatus string

const (
	StatusStatusOk    StatusStatus = "ok"
	StatusStatusError StatusStatus = "error"
)

// MarshalText implements encoding.TextMarshaler.
func (s StatusStatus) MarshalText() ([]byte, error) {
	switch s {
	case StatusStatusOk:
		return []byte(s), nil
	case StatusStatusError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StatusStatus) UnmarshalText(data []byte) error {
	switch StatusStatus(data) {
	case StatusStatusOk:
		*s = StatusStatusOk
		return nil
	case StatusStatusError:
		*s = StatusStatusError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
