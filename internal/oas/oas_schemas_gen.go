// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"
	"io"
	"net/url"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Error description.
// Ref: #/components/schemas/Error
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type GetTelegramBadgeOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetTelegramBadgeOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetTelegramBadgeOKHeaders wraps GetTelegramBadgeOK with response headers.
type GetTelegramBadgeOKHeaders struct {
	CacheControl OptString
	Response     GetTelegramBadgeOK
}

// GetCacheControl returns the value of CacheControl.
func (s *GetTelegramBadgeOKHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetResponse returns the value of Response.
func (s *GetTelegramBadgeOKHeaders) GetResponse() GetTelegramBadgeOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *GetTelegramBadgeOKHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetResponse sets the value of Response.
func (s *GetTelegramBadgeOKHeaders) SetResponse(val GetTelegramBadgeOK) {
	s.Response = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Statistics.
// Ref: #/components/schemas/Statistics
type Statistics struct {
	// Total commits.
	TotalCommits int `json:"total_commits"`
	// Top users.
	TopUsers []UserStat `json:"top_users"`
}

// GetTotalCommits returns the value of TotalCommits.
func (s *Statistics) GetTotalCommits() int {
	return s.TotalCommits
}

// GetTopUsers returns the value of TopUsers.
func (s *Statistics) GetTopUsers() []UserStat {
	return s.TopUsers
}

// SetTotalCommits sets the value of TotalCommits.
func (s *Statistics) SetTotalCommits(val int) {
	s.TotalCommits = val
}

// SetTopUsers sets the value of TopUsers.
func (s *Statistics) SetTopUsers(val []UserStat) {
	s.TopUsers = val
}

// Status.
// Ref: #/components/schemas/Status
type Status struct {
	// Message.
	Message string     `json:"message"`
	Stat    Statistics `json:"stat"`
}

// GetMessage returns the value of Message.
func (s *Status) GetMessage() string {
	return s.Message
}

// GetStat returns the value of Stat.
func (s *Status) GetStat() Statistics {
	return s.Stat
}

// SetMessage sets the value of Message.
func (s *Status) SetMessage(val string) {
	s.Message = val
}

// SetStat sets the value of Stat.
func (s *Status) SetStat(val Statistics) {
	s.Stat = val
}

// Ref: #/components/schemas/User
type User struct {
	// User ID.
	ID int64 `json:"id"`
	// User name.
	Nickname string `json:"nickname"`
	// User full name.
	FullName string `json:"full_name"`
	// User avatar URL.
	AvatarURL url.URL `json:"avatar_url"`
	// User profile URL.
	HTMLURL url.URL `json:"html_url"`
}

// GetID returns the value of ID.
func (s *User) GetID() int64 {
	return s.ID
}

// GetNickname returns the value of Nickname.
func (s *User) GetNickname() string {
	return s.Nickname
}

// GetFullName returns the value of FullName.
func (s *User) GetFullName() string {
	return s.FullName
}

// GetAvatarURL returns the value of AvatarURL.
func (s *User) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *User) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// SetID sets the value of ID.
func (s *User) SetID(val int64) {
	s.ID = val
}

// SetNickname sets the value of Nickname.
func (s *User) SetNickname(val string) {
	s.Nickname = val
}

// SetFullName sets the value of FullName.
func (s *User) SetFullName(val string) {
	s.FullName = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *User) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *User) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// User statistics.
// Ref: #/components/schemas/UserStat
type UserStat struct {
	User User `json:"user"`
	// Total commits.
	TotalCommits int `json:"total_commits"`
}

// GetUser returns the value of User.
func (s *UserStat) GetUser() User {
	return s.User
}

// GetTotalCommits returns the value of TotalCommits.
func (s *UserStat) GetTotalCommits() int {
	return s.TotalCommits
}

// SetUser sets the value of User.
func (s *UserStat) SetUser(val User) {
	s.User = val
}

// SetTotalCommits sets the value of TotalCommits.
func (s *UserStat) SetTotalCommits(val int) {
	s.TotalCommits = val
}
