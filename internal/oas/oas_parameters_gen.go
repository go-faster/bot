// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetTelegramBadgeParams is parameters of getTelegramBadge operation.
type GetTelegramBadgeParams struct {
	Title     OptString
	GroupName string
}

func unpackGetTelegramBadgeParams(packed middleware.Parameters) (params GetTelegramBadgeParams) {
	{
		key := middleware.ParameterKey{
			Name: "title",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Title = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "group_name",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeGetTelegramBadgeParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTelegramBadgeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: title.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "title",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTitleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTitleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Title.SetTo(paramsDotTitleVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "title",
			In:   "query",
			Err:  err,
		}
	}
	// Decode path: group_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTelegramOnlineBadgeParams is parameters of getTelegramOnlineBadge operation.
type GetTelegramOnlineBadgeParams struct {
	Groups []string
}

func unpackGetTelegramOnlineBadgeParams(packed middleware.Parameters) (params GetTelegramOnlineBadgeParams) {
	{
		key := middleware.ParameterKey{
			Name: "groups",
			In:   "query",
		}
		params.Groups = packed[key].([]string)
	}
	return params
}

func decodeGetTelegramOnlineBadgeParams(args [0]string, argsEscaped bool, r *http.Request) (params GetTelegramOnlineBadgeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: groups.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "groups",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotGroupsVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotGroupsVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Groups = append(params.Groups, paramsDotGroupsVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.Groups == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groups",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GithubStatusParams is parameters of githubStatus operation.
type GithubStatusParams struct {
	Secret OptString
}

func unpackGithubStatusParams(packed middleware.Parameters) (params GithubStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "secret",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Secret = v.(OptString)
		}
	}
	return params
}

func decodeGithubStatusParams(args [0]string, argsEscaped bool, r *http.Request) (params GithubStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: secret.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "secret",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSecretVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSecretVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Secret.SetTo(paramsDotSecretVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "secret",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
