// Code generated by ent, DO NOT EDIT.

package telegramchannelstate

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/go-faster/bot/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldLTE(FieldID, id))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldEQ(FieldChannelID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldEQ(FieldUserID, v))
}

// Pts applies equality check predicate on the "pts" field. It's identical to PtsEQ.
func Pts(v int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldEQ(FieldPts, v))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldEQ(FieldChannelID, v))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldNEQ(FieldChannelID, v))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldIn(FieldChannelID, vs...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldNotIn(FieldChannelID, vs...))
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldGT(FieldChannelID, v))
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldGTE(FieldChannelID, v))
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldLT(FieldChannelID, v))
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldLTE(FieldChannelID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldNotIn(FieldUserID, vs...))
}

// PtsEQ applies the EQ predicate on the "pts" field.
func PtsEQ(v int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldEQ(FieldPts, v))
}

// PtsNEQ applies the NEQ predicate on the "pts" field.
func PtsNEQ(v int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldNEQ(FieldPts, v))
}

// PtsIn applies the In predicate on the "pts" field.
func PtsIn(vs ...int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldIn(FieldPts, vs...))
}

// PtsNotIn applies the NotIn predicate on the "pts" field.
func PtsNotIn(vs ...int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldNotIn(FieldPts, vs...))
}

// PtsGT applies the GT predicate on the "pts" field.
func PtsGT(v int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldGT(FieldPts, v))
}

// PtsGTE applies the GTE predicate on the "pts" field.
func PtsGTE(v int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldGTE(FieldPts, v))
}

// PtsLT applies the LT predicate on the "pts" field.
func PtsLT(v int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldLT(FieldPts, v))
}

// PtsLTE applies the LTE predicate on the "pts" field.
func PtsLTE(v int) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(sql.FieldLTE(FieldPts, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.TelegramChannelState {
	return predicate.TelegramChannelState(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.TelegramUserState) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TelegramChannelState) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TelegramChannelState) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TelegramChannelState) predicate.TelegramChannelState {
	return predicate.TelegramChannelState(func(s *sql.Selector) {
		p(s.Not())
	})
}
