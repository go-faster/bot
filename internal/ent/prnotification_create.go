// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/prnotification"
)

// PRNotificationCreate is the builder for creating a PRNotification entity.
type PRNotificationCreate struct {
	config
	mutation *PRNotificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRepoID sets the "repo_id" field.
func (_c *PRNotificationCreate) SetRepoID(v int64) *PRNotificationCreate {
	_c.mutation.SetRepoID(v)
	return _c
}

// SetPullRequestID sets the "pull_request_id" field.
func (_c *PRNotificationCreate) SetPullRequestID(v int) *PRNotificationCreate {
	_c.mutation.SetPullRequestID(v)
	return _c
}

// SetPullRequestTitle sets the "pull_request_title" field.
func (_c *PRNotificationCreate) SetPullRequestTitle(v string) *PRNotificationCreate {
	_c.mutation.SetPullRequestTitle(v)
	return _c
}

// SetNillablePullRequestTitle sets the "pull_request_title" field if the given value is not nil.
func (_c *PRNotificationCreate) SetNillablePullRequestTitle(v *string) *PRNotificationCreate {
	if v != nil {
		_c.SetPullRequestTitle(*v)
	}
	return _c
}

// SetPullRequestBody sets the "pull_request_body" field.
func (_c *PRNotificationCreate) SetPullRequestBody(v string) *PRNotificationCreate {
	_c.mutation.SetPullRequestBody(v)
	return _c
}

// SetNillablePullRequestBody sets the "pull_request_body" field if the given value is not nil.
func (_c *PRNotificationCreate) SetNillablePullRequestBody(v *string) *PRNotificationCreate {
	if v != nil {
		_c.SetPullRequestBody(*v)
	}
	return _c
}

// SetPullRequestAuthorLogin sets the "pull_request_author_login" field.
func (_c *PRNotificationCreate) SetPullRequestAuthorLogin(v string) *PRNotificationCreate {
	_c.mutation.SetPullRequestAuthorLogin(v)
	return _c
}

// SetNillablePullRequestAuthorLogin sets the "pull_request_author_login" field if the given value is not nil.
func (_c *PRNotificationCreate) SetNillablePullRequestAuthorLogin(v *string) *PRNotificationCreate {
	if v != nil {
		_c.SetPullRequestAuthorLogin(*v)
	}
	return _c
}

// SetMessageID sets the "message_id" field.
func (_c *PRNotificationCreate) SetMessageID(v int) *PRNotificationCreate {
	_c.mutation.SetMessageID(v)
	return _c
}

// Mutation returns the PRNotificationMutation object of the builder.
func (_c *PRNotificationCreate) Mutation() *PRNotificationMutation {
	return _c.mutation
}

// Save creates the PRNotification in the database.
func (_c *PRNotificationCreate) Save(ctx context.Context) (*PRNotification, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PRNotificationCreate) SaveX(ctx context.Context) *PRNotification {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PRNotificationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PRNotificationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PRNotificationCreate) defaults() {
	if _, ok := _c.mutation.PullRequestTitle(); !ok {
		v := prnotification.DefaultPullRequestTitle
		_c.mutation.SetPullRequestTitle(v)
	}
	if _, ok := _c.mutation.PullRequestBody(); !ok {
		v := prnotification.DefaultPullRequestBody
		_c.mutation.SetPullRequestBody(v)
	}
	if _, ok := _c.mutation.PullRequestAuthorLogin(); !ok {
		v := prnotification.DefaultPullRequestAuthorLogin
		_c.mutation.SetPullRequestAuthorLogin(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PRNotificationCreate) check() error {
	if _, ok := _c.mutation.RepoID(); !ok {
		return &ValidationError{Name: "repo_id", err: errors.New(`ent: missing required field "PRNotification.repo_id"`)}
	}
	if _, ok := _c.mutation.PullRequestID(); !ok {
		return &ValidationError{Name: "pull_request_id", err: errors.New(`ent: missing required field "PRNotification.pull_request_id"`)}
	}
	if _, ok := _c.mutation.PullRequestTitle(); !ok {
		return &ValidationError{Name: "pull_request_title", err: errors.New(`ent: missing required field "PRNotification.pull_request_title"`)}
	}
	if _, ok := _c.mutation.PullRequestBody(); !ok {
		return &ValidationError{Name: "pull_request_body", err: errors.New(`ent: missing required field "PRNotification.pull_request_body"`)}
	}
	if _, ok := _c.mutation.PullRequestAuthorLogin(); !ok {
		return &ValidationError{Name: "pull_request_author_login", err: errors.New(`ent: missing required field "PRNotification.pull_request_author_login"`)}
	}
	if _, ok := _c.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`ent: missing required field "PRNotification.message_id"`)}
	}
	return nil
}

func (_c *PRNotificationCreate) sqlSave(ctx context.Context) (*PRNotification, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PRNotificationCreate) createSpec() (*PRNotification, *sqlgraph.CreateSpec) {
	var (
		_node = &PRNotification{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(prnotification.Table, sqlgraph.NewFieldSpec(prnotification.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.RepoID(); ok {
		_spec.SetField(prnotification.FieldRepoID, field.TypeInt64, value)
		_node.RepoID = value
	}
	if value, ok := _c.mutation.PullRequestID(); ok {
		_spec.SetField(prnotification.FieldPullRequestID, field.TypeInt, value)
		_node.PullRequestID = value
	}
	if value, ok := _c.mutation.PullRequestTitle(); ok {
		_spec.SetField(prnotification.FieldPullRequestTitle, field.TypeString, value)
		_node.PullRequestTitle = value
	}
	if value, ok := _c.mutation.PullRequestBody(); ok {
		_spec.SetField(prnotification.FieldPullRequestBody, field.TypeString, value)
		_node.PullRequestBody = value
	}
	if value, ok := _c.mutation.PullRequestAuthorLogin(); ok {
		_spec.SetField(prnotification.FieldPullRequestAuthorLogin, field.TypeString, value)
		_node.PullRequestAuthorLogin = value
	}
	if value, ok := _c.mutation.MessageID(); ok {
		_spec.SetField(prnotification.FieldMessageID, field.TypeInt, value)
		_node.MessageID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PRNotification.Create().
//		SetRepoID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PRNotificationUpsert) {
//			SetRepoID(v+v).
//		}).
//		Exec(ctx)
func (_c *PRNotificationCreate) OnConflict(opts ...sql.ConflictOption) *PRNotificationUpsertOne {
	_c.conflict = opts
	return &PRNotificationUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PRNotification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PRNotificationCreate) OnConflictColumns(columns ...string) *PRNotificationUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PRNotificationUpsertOne{
		create: _c,
	}
}

type (
	// PRNotificationUpsertOne is the builder for "upsert"-ing
	//  one PRNotification node.
	PRNotificationUpsertOne struct {
		create *PRNotificationCreate
	}

	// PRNotificationUpsert is the "OnConflict" setter.
	PRNotificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetRepoID sets the "repo_id" field.
func (u *PRNotificationUpsert) SetRepoID(v int64) *PRNotificationUpsert {
	u.Set(prnotification.FieldRepoID, v)
	return u
}

// UpdateRepoID sets the "repo_id" field to the value that was provided on create.
func (u *PRNotificationUpsert) UpdateRepoID() *PRNotificationUpsert {
	u.SetExcluded(prnotification.FieldRepoID)
	return u
}

// AddRepoID adds v to the "repo_id" field.
func (u *PRNotificationUpsert) AddRepoID(v int64) *PRNotificationUpsert {
	u.Add(prnotification.FieldRepoID, v)
	return u
}

// SetPullRequestID sets the "pull_request_id" field.
func (u *PRNotificationUpsert) SetPullRequestID(v int) *PRNotificationUpsert {
	u.Set(prnotification.FieldPullRequestID, v)
	return u
}

// UpdatePullRequestID sets the "pull_request_id" field to the value that was provided on create.
func (u *PRNotificationUpsert) UpdatePullRequestID() *PRNotificationUpsert {
	u.SetExcluded(prnotification.FieldPullRequestID)
	return u
}

// AddPullRequestID adds v to the "pull_request_id" field.
func (u *PRNotificationUpsert) AddPullRequestID(v int) *PRNotificationUpsert {
	u.Add(prnotification.FieldPullRequestID, v)
	return u
}

// SetPullRequestTitle sets the "pull_request_title" field.
func (u *PRNotificationUpsert) SetPullRequestTitle(v string) *PRNotificationUpsert {
	u.Set(prnotification.FieldPullRequestTitle, v)
	return u
}

// UpdatePullRequestTitle sets the "pull_request_title" field to the value that was provided on create.
func (u *PRNotificationUpsert) UpdatePullRequestTitle() *PRNotificationUpsert {
	u.SetExcluded(prnotification.FieldPullRequestTitle)
	return u
}

// SetPullRequestBody sets the "pull_request_body" field.
func (u *PRNotificationUpsert) SetPullRequestBody(v string) *PRNotificationUpsert {
	u.Set(prnotification.FieldPullRequestBody, v)
	return u
}

// UpdatePullRequestBody sets the "pull_request_body" field to the value that was provided on create.
func (u *PRNotificationUpsert) UpdatePullRequestBody() *PRNotificationUpsert {
	u.SetExcluded(prnotification.FieldPullRequestBody)
	return u
}

// SetPullRequestAuthorLogin sets the "pull_request_author_login" field.
func (u *PRNotificationUpsert) SetPullRequestAuthorLogin(v string) *PRNotificationUpsert {
	u.Set(prnotification.FieldPullRequestAuthorLogin, v)
	return u
}

// UpdatePullRequestAuthorLogin sets the "pull_request_author_login" field to the value that was provided on create.
func (u *PRNotificationUpsert) UpdatePullRequestAuthorLogin() *PRNotificationUpsert {
	u.SetExcluded(prnotification.FieldPullRequestAuthorLogin)
	return u
}

// SetMessageID sets the "message_id" field.
func (u *PRNotificationUpsert) SetMessageID(v int) *PRNotificationUpsert {
	u.Set(prnotification.FieldMessageID, v)
	return u
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *PRNotificationUpsert) UpdateMessageID() *PRNotificationUpsert {
	u.SetExcluded(prnotification.FieldMessageID)
	return u
}

// AddMessageID adds v to the "message_id" field.
func (u *PRNotificationUpsert) AddMessageID(v int) *PRNotificationUpsert {
	u.Add(prnotification.FieldMessageID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PRNotification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PRNotificationUpsertOne) UpdateNewValues() *PRNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PRNotification.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PRNotificationUpsertOne) Ignore() *PRNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PRNotificationUpsertOne) DoNothing() *PRNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PRNotificationCreate.OnConflict
// documentation for more info.
func (u *PRNotificationUpsertOne) Update(set func(*PRNotificationUpsert)) *PRNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PRNotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetRepoID sets the "repo_id" field.
func (u *PRNotificationUpsertOne) SetRepoID(v int64) *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetRepoID(v)
	})
}

// AddRepoID adds v to the "repo_id" field.
func (u *PRNotificationUpsertOne) AddRepoID(v int64) *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.AddRepoID(v)
	})
}

// UpdateRepoID sets the "repo_id" field to the value that was provided on create.
func (u *PRNotificationUpsertOne) UpdateRepoID() *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdateRepoID()
	})
}

// SetPullRequestID sets the "pull_request_id" field.
func (u *PRNotificationUpsertOne) SetPullRequestID(v int) *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetPullRequestID(v)
	})
}

// AddPullRequestID adds v to the "pull_request_id" field.
func (u *PRNotificationUpsertOne) AddPullRequestID(v int) *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.AddPullRequestID(v)
	})
}

// UpdatePullRequestID sets the "pull_request_id" field to the value that was provided on create.
func (u *PRNotificationUpsertOne) UpdatePullRequestID() *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdatePullRequestID()
	})
}

// SetPullRequestTitle sets the "pull_request_title" field.
func (u *PRNotificationUpsertOne) SetPullRequestTitle(v string) *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetPullRequestTitle(v)
	})
}

// UpdatePullRequestTitle sets the "pull_request_title" field to the value that was provided on create.
func (u *PRNotificationUpsertOne) UpdatePullRequestTitle() *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdatePullRequestTitle()
	})
}

// SetPullRequestBody sets the "pull_request_body" field.
func (u *PRNotificationUpsertOne) SetPullRequestBody(v string) *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetPullRequestBody(v)
	})
}

// UpdatePullRequestBody sets the "pull_request_body" field to the value that was provided on create.
func (u *PRNotificationUpsertOne) UpdatePullRequestBody() *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdatePullRequestBody()
	})
}

// SetPullRequestAuthorLogin sets the "pull_request_author_login" field.
func (u *PRNotificationUpsertOne) SetPullRequestAuthorLogin(v string) *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetPullRequestAuthorLogin(v)
	})
}

// UpdatePullRequestAuthorLogin sets the "pull_request_author_login" field to the value that was provided on create.
func (u *PRNotificationUpsertOne) UpdatePullRequestAuthorLogin() *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdatePullRequestAuthorLogin()
	})
}

// SetMessageID sets the "message_id" field.
func (u *PRNotificationUpsertOne) SetMessageID(v int) *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetMessageID(v)
	})
}

// AddMessageID adds v to the "message_id" field.
func (u *PRNotificationUpsertOne) AddMessageID(v int) *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.AddMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *PRNotificationUpsertOne) UpdateMessageID() *PRNotificationUpsertOne {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdateMessageID()
	})
}

// Exec executes the query.
func (u *PRNotificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PRNotificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PRNotificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PRNotificationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PRNotificationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PRNotificationCreateBulk is the builder for creating many PRNotification entities in bulk.
type PRNotificationCreateBulk struct {
	config
	err      error
	builders []*PRNotificationCreate
	conflict []sql.ConflictOption
}

// Save creates the PRNotification entities in the database.
func (_c *PRNotificationCreateBulk) Save(ctx context.Context) ([]*PRNotification, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PRNotification, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PRNotificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PRNotificationCreateBulk) SaveX(ctx context.Context) []*PRNotification {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PRNotificationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PRNotificationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PRNotification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PRNotificationUpsert) {
//			SetRepoID(v+v).
//		}).
//		Exec(ctx)
func (_c *PRNotificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *PRNotificationUpsertBulk {
	_c.conflict = opts
	return &PRNotificationUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PRNotification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PRNotificationCreateBulk) OnConflictColumns(columns ...string) *PRNotificationUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PRNotificationUpsertBulk{
		create: _c,
	}
}

// PRNotificationUpsertBulk is the builder for "upsert"-ing
// a bulk of PRNotification nodes.
type PRNotificationUpsertBulk struct {
	create *PRNotificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PRNotification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PRNotificationUpsertBulk) UpdateNewValues() *PRNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PRNotification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PRNotificationUpsertBulk) Ignore() *PRNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PRNotificationUpsertBulk) DoNothing() *PRNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PRNotificationCreateBulk.OnConflict
// documentation for more info.
func (u *PRNotificationUpsertBulk) Update(set func(*PRNotificationUpsert)) *PRNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PRNotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetRepoID sets the "repo_id" field.
func (u *PRNotificationUpsertBulk) SetRepoID(v int64) *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetRepoID(v)
	})
}

// AddRepoID adds v to the "repo_id" field.
func (u *PRNotificationUpsertBulk) AddRepoID(v int64) *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.AddRepoID(v)
	})
}

// UpdateRepoID sets the "repo_id" field to the value that was provided on create.
func (u *PRNotificationUpsertBulk) UpdateRepoID() *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdateRepoID()
	})
}

// SetPullRequestID sets the "pull_request_id" field.
func (u *PRNotificationUpsertBulk) SetPullRequestID(v int) *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetPullRequestID(v)
	})
}

// AddPullRequestID adds v to the "pull_request_id" field.
func (u *PRNotificationUpsertBulk) AddPullRequestID(v int) *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.AddPullRequestID(v)
	})
}

// UpdatePullRequestID sets the "pull_request_id" field to the value that was provided on create.
func (u *PRNotificationUpsertBulk) UpdatePullRequestID() *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdatePullRequestID()
	})
}

// SetPullRequestTitle sets the "pull_request_title" field.
func (u *PRNotificationUpsertBulk) SetPullRequestTitle(v string) *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetPullRequestTitle(v)
	})
}

// UpdatePullRequestTitle sets the "pull_request_title" field to the value that was provided on create.
func (u *PRNotificationUpsertBulk) UpdatePullRequestTitle() *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdatePullRequestTitle()
	})
}

// SetPullRequestBody sets the "pull_request_body" field.
func (u *PRNotificationUpsertBulk) SetPullRequestBody(v string) *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetPullRequestBody(v)
	})
}

// UpdatePullRequestBody sets the "pull_request_body" field to the value that was provided on create.
func (u *PRNotificationUpsertBulk) UpdatePullRequestBody() *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdatePullRequestBody()
	})
}

// SetPullRequestAuthorLogin sets the "pull_request_author_login" field.
func (u *PRNotificationUpsertBulk) SetPullRequestAuthorLogin(v string) *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetPullRequestAuthorLogin(v)
	})
}

// UpdatePullRequestAuthorLogin sets the "pull_request_author_login" field to the value that was provided on create.
func (u *PRNotificationUpsertBulk) UpdatePullRequestAuthorLogin() *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdatePullRequestAuthorLogin()
	})
}

// SetMessageID sets the "message_id" field.
func (u *PRNotificationUpsertBulk) SetMessageID(v int) *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.SetMessageID(v)
	})
}

// AddMessageID adds v to the "message_id" field.
func (u *PRNotificationUpsertBulk) AddMessageID(v int) *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.AddMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *PRNotificationUpsertBulk) UpdateMessageID() *PRNotificationUpsertBulk {
	return u.Update(func(s *PRNotificationUpsert) {
		s.UpdateMessageID()
	})
}

// Exec executes the query.
func (u *PRNotificationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PRNotificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PRNotificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PRNotificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
