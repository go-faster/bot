// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/predicate"
	"github.com/go-faster/bot/internal/ent/telegramchannelstate"
	"github.com/go-faster/bot/internal/ent/telegramuserstate"
)

// TelegramUserStateUpdate is the builder for updating TelegramUserState entities.
type TelegramUserStateUpdate struct {
	config
	hooks    []Hook
	mutation *TelegramUserStateMutation
}

// Where appends a list predicates to the TelegramUserStateUpdate builder.
func (_u *TelegramUserStateUpdate) Where(ps ...predicate.TelegramUserState) *TelegramUserStateUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetQts sets the "qts" field.
func (_u *TelegramUserStateUpdate) SetQts(v int) *TelegramUserStateUpdate {
	_u.mutation.ResetQts()
	_u.mutation.SetQts(v)
	return _u
}

// SetNillableQts sets the "qts" field if the given value is not nil.
func (_u *TelegramUserStateUpdate) SetNillableQts(v *int) *TelegramUserStateUpdate {
	if v != nil {
		_u.SetQts(*v)
	}
	return _u
}

// AddQts adds value to the "qts" field.
func (_u *TelegramUserStateUpdate) AddQts(v int) *TelegramUserStateUpdate {
	_u.mutation.AddQts(v)
	return _u
}

// SetPts sets the "pts" field.
func (_u *TelegramUserStateUpdate) SetPts(v int) *TelegramUserStateUpdate {
	_u.mutation.ResetPts()
	_u.mutation.SetPts(v)
	return _u
}

// SetNillablePts sets the "pts" field if the given value is not nil.
func (_u *TelegramUserStateUpdate) SetNillablePts(v *int) *TelegramUserStateUpdate {
	if v != nil {
		_u.SetPts(*v)
	}
	return _u
}

// AddPts adds value to the "pts" field.
func (_u *TelegramUserStateUpdate) AddPts(v int) *TelegramUserStateUpdate {
	_u.mutation.AddPts(v)
	return _u
}

// SetDate sets the "date" field.
func (_u *TelegramUserStateUpdate) SetDate(v int) *TelegramUserStateUpdate {
	_u.mutation.ResetDate()
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *TelegramUserStateUpdate) SetNillableDate(v *int) *TelegramUserStateUpdate {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// AddDate adds value to the "date" field.
func (_u *TelegramUserStateUpdate) AddDate(v int) *TelegramUserStateUpdate {
	_u.mutation.AddDate(v)
	return _u
}

// SetSeq sets the "seq" field.
func (_u *TelegramUserStateUpdate) SetSeq(v int) *TelegramUserStateUpdate {
	_u.mutation.ResetSeq()
	_u.mutation.SetSeq(v)
	return _u
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (_u *TelegramUserStateUpdate) SetNillableSeq(v *int) *TelegramUserStateUpdate {
	if v != nil {
		_u.SetSeq(*v)
	}
	return _u
}

// AddSeq adds value to the "seq" field.
func (_u *TelegramUserStateUpdate) AddSeq(v int) *TelegramUserStateUpdate {
	_u.mutation.AddSeq(v)
	return _u
}

// AddChannelIDs adds the "channels" edge to the TelegramChannelState entity by IDs.
func (_u *TelegramUserStateUpdate) AddChannelIDs(ids ...int) *TelegramUserStateUpdate {
	_u.mutation.AddChannelIDs(ids...)
	return _u
}

// AddChannels adds the "channels" edges to the TelegramChannelState entity.
func (_u *TelegramUserStateUpdate) AddChannels(v ...*TelegramChannelState) *TelegramUserStateUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChannelIDs(ids...)
}

// Mutation returns the TelegramUserStateMutation object of the builder.
func (_u *TelegramUserStateUpdate) Mutation() *TelegramUserStateMutation {
	return _u.mutation
}

// ClearChannels clears all "channels" edges to the TelegramChannelState entity.
func (_u *TelegramUserStateUpdate) ClearChannels() *TelegramUserStateUpdate {
	_u.mutation.ClearChannels()
	return _u
}

// RemoveChannelIDs removes the "channels" edge to TelegramChannelState entities by IDs.
func (_u *TelegramUserStateUpdate) RemoveChannelIDs(ids ...int) *TelegramUserStateUpdate {
	_u.mutation.RemoveChannelIDs(ids...)
	return _u
}

// RemoveChannels removes "channels" edges to TelegramChannelState entities.
func (_u *TelegramUserStateUpdate) RemoveChannels(v ...*TelegramChannelState) *TelegramUserStateUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChannelIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TelegramUserStateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TelegramUserStateUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TelegramUserStateUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TelegramUserStateUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TelegramUserStateUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramuserstate.Table, telegramuserstate.Columns, sqlgraph.NewFieldSpec(telegramuserstate.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Qts(); ok {
		_spec.SetField(telegramuserstate.FieldQts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQts(); ok {
		_spec.AddField(telegramuserstate.FieldQts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Pts(); ok {
		_spec.SetField(telegramuserstate.FieldPts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPts(); ok {
		_spec.AddField(telegramuserstate.FieldPts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(telegramuserstate.FieldDate, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDate(); ok {
		_spec.AddField(telegramuserstate.FieldDate, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Seq(); ok {
		_spec.SetField(telegramuserstate.FieldSeq, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSeq(); ok {
		_spec.AddField(telegramuserstate.FieldSeq, field.TypeInt, value)
	}
	if _u.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChannelsIDs(); len(nodes) > 0 && !_u.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramuserstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TelegramUserStateUpdateOne is the builder for updating a single TelegramUserState entity.
type TelegramUserStateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelegramUserStateMutation
}

// SetQts sets the "qts" field.
func (_u *TelegramUserStateUpdateOne) SetQts(v int) *TelegramUserStateUpdateOne {
	_u.mutation.ResetQts()
	_u.mutation.SetQts(v)
	return _u
}

// SetNillableQts sets the "qts" field if the given value is not nil.
func (_u *TelegramUserStateUpdateOne) SetNillableQts(v *int) *TelegramUserStateUpdateOne {
	if v != nil {
		_u.SetQts(*v)
	}
	return _u
}

// AddQts adds value to the "qts" field.
func (_u *TelegramUserStateUpdateOne) AddQts(v int) *TelegramUserStateUpdateOne {
	_u.mutation.AddQts(v)
	return _u
}

// SetPts sets the "pts" field.
func (_u *TelegramUserStateUpdateOne) SetPts(v int) *TelegramUserStateUpdateOne {
	_u.mutation.ResetPts()
	_u.mutation.SetPts(v)
	return _u
}

// SetNillablePts sets the "pts" field if the given value is not nil.
func (_u *TelegramUserStateUpdateOne) SetNillablePts(v *int) *TelegramUserStateUpdateOne {
	if v != nil {
		_u.SetPts(*v)
	}
	return _u
}

// AddPts adds value to the "pts" field.
func (_u *TelegramUserStateUpdateOne) AddPts(v int) *TelegramUserStateUpdateOne {
	_u.mutation.AddPts(v)
	return _u
}

// SetDate sets the "date" field.
func (_u *TelegramUserStateUpdateOne) SetDate(v int) *TelegramUserStateUpdateOne {
	_u.mutation.ResetDate()
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *TelegramUserStateUpdateOne) SetNillableDate(v *int) *TelegramUserStateUpdateOne {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// AddDate adds value to the "date" field.
func (_u *TelegramUserStateUpdateOne) AddDate(v int) *TelegramUserStateUpdateOne {
	_u.mutation.AddDate(v)
	return _u
}

// SetSeq sets the "seq" field.
func (_u *TelegramUserStateUpdateOne) SetSeq(v int) *TelegramUserStateUpdateOne {
	_u.mutation.ResetSeq()
	_u.mutation.SetSeq(v)
	return _u
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (_u *TelegramUserStateUpdateOne) SetNillableSeq(v *int) *TelegramUserStateUpdateOne {
	if v != nil {
		_u.SetSeq(*v)
	}
	return _u
}

// AddSeq adds value to the "seq" field.
func (_u *TelegramUserStateUpdateOne) AddSeq(v int) *TelegramUserStateUpdateOne {
	_u.mutation.AddSeq(v)
	return _u
}

// AddChannelIDs adds the "channels" edge to the TelegramChannelState entity by IDs.
func (_u *TelegramUserStateUpdateOne) AddChannelIDs(ids ...int) *TelegramUserStateUpdateOne {
	_u.mutation.AddChannelIDs(ids...)
	return _u
}

// AddChannels adds the "channels" edges to the TelegramChannelState entity.
func (_u *TelegramUserStateUpdateOne) AddChannels(v ...*TelegramChannelState) *TelegramUserStateUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChannelIDs(ids...)
}

// Mutation returns the TelegramUserStateMutation object of the builder.
func (_u *TelegramUserStateUpdateOne) Mutation() *TelegramUserStateMutation {
	return _u.mutation
}

// ClearChannels clears all "channels" edges to the TelegramChannelState entity.
func (_u *TelegramUserStateUpdateOne) ClearChannels() *TelegramUserStateUpdateOne {
	_u.mutation.ClearChannels()
	return _u
}

// RemoveChannelIDs removes the "channels" edge to TelegramChannelState entities by IDs.
func (_u *TelegramUserStateUpdateOne) RemoveChannelIDs(ids ...int) *TelegramUserStateUpdateOne {
	_u.mutation.RemoveChannelIDs(ids...)
	return _u
}

// RemoveChannels removes "channels" edges to TelegramChannelState entities.
func (_u *TelegramUserStateUpdateOne) RemoveChannels(v ...*TelegramChannelState) *TelegramUserStateUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChannelIDs(ids...)
}

// Where appends a list predicates to the TelegramUserStateUpdate builder.
func (_u *TelegramUserStateUpdateOne) Where(ps ...predicate.TelegramUserState) *TelegramUserStateUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TelegramUserStateUpdateOne) Select(field string, fields ...string) *TelegramUserStateUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TelegramUserState entity.
func (_u *TelegramUserStateUpdateOne) Save(ctx context.Context) (*TelegramUserState, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TelegramUserStateUpdateOne) SaveX(ctx context.Context) *TelegramUserState {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TelegramUserStateUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TelegramUserStateUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TelegramUserStateUpdateOne) sqlSave(ctx context.Context) (_node *TelegramUserState, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramuserstate.Table, telegramuserstate.Columns, sqlgraph.NewFieldSpec(telegramuserstate.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelegramUserState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telegramuserstate.FieldID)
		for _, f := range fields {
			if !telegramuserstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telegramuserstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Qts(); ok {
		_spec.SetField(telegramuserstate.FieldQts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQts(); ok {
		_spec.AddField(telegramuserstate.FieldQts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Pts(); ok {
		_spec.SetField(telegramuserstate.FieldPts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPts(); ok {
		_spec.AddField(telegramuserstate.FieldPts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(telegramuserstate.FieldDate, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDate(); ok {
		_spec.AddField(telegramuserstate.FieldDate, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Seq(); ok {
		_spec.SetField(telegramuserstate.FieldSeq, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSeq(); ok {
		_spec.AddField(telegramuserstate.FieldSeq, field.TypeInt, value)
	}
	if _u.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChannelsIDs(); len(nodes) > 0 && !_u.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TelegramUserState{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramuserstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
