// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/predicate"
	"github.com/go-faster/bot/internal/ent/telegramchannelstate"
	"github.com/go-faster/bot/internal/ent/telegramuserstate"
)

// TelegramUserStateUpdate is the builder for updating TelegramUserState entities.
type TelegramUserStateUpdate struct {
	config
	hooks    []Hook
	mutation *TelegramUserStateMutation
}

// Where appends a list predicates to the TelegramUserStateUpdate builder.
func (tusu *TelegramUserStateUpdate) Where(ps ...predicate.TelegramUserState) *TelegramUserStateUpdate {
	tusu.mutation.Where(ps...)
	return tusu
}

// SetQts sets the "qts" field.
func (tusu *TelegramUserStateUpdate) SetQts(i int) *TelegramUserStateUpdate {
	tusu.mutation.ResetQts()
	tusu.mutation.SetQts(i)
	return tusu
}

// SetNillableQts sets the "qts" field if the given value is not nil.
func (tusu *TelegramUserStateUpdate) SetNillableQts(i *int) *TelegramUserStateUpdate {
	if i != nil {
		tusu.SetQts(*i)
	}
	return tusu
}

// AddQts adds i to the "qts" field.
func (tusu *TelegramUserStateUpdate) AddQts(i int) *TelegramUserStateUpdate {
	tusu.mutation.AddQts(i)
	return tusu
}

// SetPts sets the "pts" field.
func (tusu *TelegramUserStateUpdate) SetPts(i int) *TelegramUserStateUpdate {
	tusu.mutation.ResetPts()
	tusu.mutation.SetPts(i)
	return tusu
}

// SetNillablePts sets the "pts" field if the given value is not nil.
func (tusu *TelegramUserStateUpdate) SetNillablePts(i *int) *TelegramUserStateUpdate {
	if i != nil {
		tusu.SetPts(*i)
	}
	return tusu
}

// AddPts adds i to the "pts" field.
func (tusu *TelegramUserStateUpdate) AddPts(i int) *TelegramUserStateUpdate {
	tusu.mutation.AddPts(i)
	return tusu
}

// SetDate sets the "date" field.
func (tusu *TelegramUserStateUpdate) SetDate(i int) *TelegramUserStateUpdate {
	tusu.mutation.ResetDate()
	tusu.mutation.SetDate(i)
	return tusu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (tusu *TelegramUserStateUpdate) SetNillableDate(i *int) *TelegramUserStateUpdate {
	if i != nil {
		tusu.SetDate(*i)
	}
	return tusu
}

// AddDate adds i to the "date" field.
func (tusu *TelegramUserStateUpdate) AddDate(i int) *TelegramUserStateUpdate {
	tusu.mutation.AddDate(i)
	return tusu
}

// SetSeq sets the "seq" field.
func (tusu *TelegramUserStateUpdate) SetSeq(i int) *TelegramUserStateUpdate {
	tusu.mutation.ResetSeq()
	tusu.mutation.SetSeq(i)
	return tusu
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (tusu *TelegramUserStateUpdate) SetNillableSeq(i *int) *TelegramUserStateUpdate {
	if i != nil {
		tusu.SetSeq(*i)
	}
	return tusu
}

// AddSeq adds i to the "seq" field.
func (tusu *TelegramUserStateUpdate) AddSeq(i int) *TelegramUserStateUpdate {
	tusu.mutation.AddSeq(i)
	return tusu
}

// AddChannelIDs adds the "channels" edge to the TelegramChannelState entity by IDs.
func (tusu *TelegramUserStateUpdate) AddChannelIDs(ids ...int) *TelegramUserStateUpdate {
	tusu.mutation.AddChannelIDs(ids...)
	return tusu
}

// AddChannels adds the "channels" edges to the TelegramChannelState entity.
func (tusu *TelegramUserStateUpdate) AddChannels(t ...*TelegramChannelState) *TelegramUserStateUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tusu.AddChannelIDs(ids...)
}

// Mutation returns the TelegramUserStateMutation object of the builder.
func (tusu *TelegramUserStateUpdate) Mutation() *TelegramUserStateMutation {
	return tusu.mutation
}

// ClearChannels clears all "channels" edges to the TelegramChannelState entity.
func (tusu *TelegramUserStateUpdate) ClearChannels() *TelegramUserStateUpdate {
	tusu.mutation.ClearChannels()
	return tusu
}

// RemoveChannelIDs removes the "channels" edge to TelegramChannelState entities by IDs.
func (tusu *TelegramUserStateUpdate) RemoveChannelIDs(ids ...int) *TelegramUserStateUpdate {
	tusu.mutation.RemoveChannelIDs(ids...)
	return tusu
}

// RemoveChannels removes "channels" edges to TelegramChannelState entities.
func (tusu *TelegramUserStateUpdate) RemoveChannels(t ...*TelegramChannelState) *TelegramUserStateUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tusu.RemoveChannelIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tusu *TelegramUserStateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tusu.sqlSave, tusu.mutation, tusu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tusu *TelegramUserStateUpdate) SaveX(ctx context.Context) int {
	affected, err := tusu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tusu *TelegramUserStateUpdate) Exec(ctx context.Context) error {
	_, err := tusu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tusu *TelegramUserStateUpdate) ExecX(ctx context.Context) {
	if err := tusu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tusu *TelegramUserStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramuserstate.Table, telegramuserstate.Columns, sqlgraph.NewFieldSpec(telegramuserstate.FieldID, field.TypeInt64))
	if ps := tusu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tusu.mutation.Qts(); ok {
		_spec.SetField(telegramuserstate.FieldQts, field.TypeInt, value)
	}
	if value, ok := tusu.mutation.AddedQts(); ok {
		_spec.AddField(telegramuserstate.FieldQts, field.TypeInt, value)
	}
	if value, ok := tusu.mutation.Pts(); ok {
		_spec.SetField(telegramuserstate.FieldPts, field.TypeInt, value)
	}
	if value, ok := tusu.mutation.AddedPts(); ok {
		_spec.AddField(telegramuserstate.FieldPts, field.TypeInt, value)
	}
	if value, ok := tusu.mutation.Date(); ok {
		_spec.SetField(telegramuserstate.FieldDate, field.TypeInt, value)
	}
	if value, ok := tusu.mutation.AddedDate(); ok {
		_spec.AddField(telegramuserstate.FieldDate, field.TypeInt, value)
	}
	if value, ok := tusu.mutation.Seq(); ok {
		_spec.SetField(telegramuserstate.FieldSeq, field.TypeInt, value)
	}
	if value, ok := tusu.mutation.AddedSeq(); ok {
		_spec.AddField(telegramuserstate.FieldSeq, field.TypeInt, value)
	}
	if tusu.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tusu.mutation.RemovedChannelsIDs(); len(nodes) > 0 && !tusu.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tusu.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tusu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramuserstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tusu.mutation.done = true
	return n, nil
}

// TelegramUserStateUpdateOne is the builder for updating a single TelegramUserState entity.
type TelegramUserStateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelegramUserStateMutation
}

// SetQts sets the "qts" field.
func (tusuo *TelegramUserStateUpdateOne) SetQts(i int) *TelegramUserStateUpdateOne {
	tusuo.mutation.ResetQts()
	tusuo.mutation.SetQts(i)
	return tusuo
}

// SetNillableQts sets the "qts" field if the given value is not nil.
func (tusuo *TelegramUserStateUpdateOne) SetNillableQts(i *int) *TelegramUserStateUpdateOne {
	if i != nil {
		tusuo.SetQts(*i)
	}
	return tusuo
}

// AddQts adds i to the "qts" field.
func (tusuo *TelegramUserStateUpdateOne) AddQts(i int) *TelegramUserStateUpdateOne {
	tusuo.mutation.AddQts(i)
	return tusuo
}

// SetPts sets the "pts" field.
func (tusuo *TelegramUserStateUpdateOne) SetPts(i int) *TelegramUserStateUpdateOne {
	tusuo.mutation.ResetPts()
	tusuo.mutation.SetPts(i)
	return tusuo
}

// SetNillablePts sets the "pts" field if the given value is not nil.
func (tusuo *TelegramUserStateUpdateOne) SetNillablePts(i *int) *TelegramUserStateUpdateOne {
	if i != nil {
		tusuo.SetPts(*i)
	}
	return tusuo
}

// AddPts adds i to the "pts" field.
func (tusuo *TelegramUserStateUpdateOne) AddPts(i int) *TelegramUserStateUpdateOne {
	tusuo.mutation.AddPts(i)
	return tusuo
}

// SetDate sets the "date" field.
func (tusuo *TelegramUserStateUpdateOne) SetDate(i int) *TelegramUserStateUpdateOne {
	tusuo.mutation.ResetDate()
	tusuo.mutation.SetDate(i)
	return tusuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (tusuo *TelegramUserStateUpdateOne) SetNillableDate(i *int) *TelegramUserStateUpdateOne {
	if i != nil {
		tusuo.SetDate(*i)
	}
	return tusuo
}

// AddDate adds i to the "date" field.
func (tusuo *TelegramUserStateUpdateOne) AddDate(i int) *TelegramUserStateUpdateOne {
	tusuo.mutation.AddDate(i)
	return tusuo
}

// SetSeq sets the "seq" field.
func (tusuo *TelegramUserStateUpdateOne) SetSeq(i int) *TelegramUserStateUpdateOne {
	tusuo.mutation.ResetSeq()
	tusuo.mutation.SetSeq(i)
	return tusuo
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (tusuo *TelegramUserStateUpdateOne) SetNillableSeq(i *int) *TelegramUserStateUpdateOne {
	if i != nil {
		tusuo.SetSeq(*i)
	}
	return tusuo
}

// AddSeq adds i to the "seq" field.
func (tusuo *TelegramUserStateUpdateOne) AddSeq(i int) *TelegramUserStateUpdateOne {
	tusuo.mutation.AddSeq(i)
	return tusuo
}

// AddChannelIDs adds the "channels" edge to the TelegramChannelState entity by IDs.
func (tusuo *TelegramUserStateUpdateOne) AddChannelIDs(ids ...int) *TelegramUserStateUpdateOne {
	tusuo.mutation.AddChannelIDs(ids...)
	return tusuo
}

// AddChannels adds the "channels" edges to the TelegramChannelState entity.
func (tusuo *TelegramUserStateUpdateOne) AddChannels(t ...*TelegramChannelState) *TelegramUserStateUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tusuo.AddChannelIDs(ids...)
}

// Mutation returns the TelegramUserStateMutation object of the builder.
func (tusuo *TelegramUserStateUpdateOne) Mutation() *TelegramUserStateMutation {
	return tusuo.mutation
}

// ClearChannels clears all "channels" edges to the TelegramChannelState entity.
func (tusuo *TelegramUserStateUpdateOne) ClearChannels() *TelegramUserStateUpdateOne {
	tusuo.mutation.ClearChannels()
	return tusuo
}

// RemoveChannelIDs removes the "channels" edge to TelegramChannelState entities by IDs.
func (tusuo *TelegramUserStateUpdateOne) RemoveChannelIDs(ids ...int) *TelegramUserStateUpdateOne {
	tusuo.mutation.RemoveChannelIDs(ids...)
	return tusuo
}

// RemoveChannels removes "channels" edges to TelegramChannelState entities.
func (tusuo *TelegramUserStateUpdateOne) RemoveChannels(t ...*TelegramChannelState) *TelegramUserStateUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tusuo.RemoveChannelIDs(ids...)
}

// Where appends a list predicates to the TelegramUserStateUpdate builder.
func (tusuo *TelegramUserStateUpdateOne) Where(ps ...predicate.TelegramUserState) *TelegramUserStateUpdateOne {
	tusuo.mutation.Where(ps...)
	return tusuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tusuo *TelegramUserStateUpdateOne) Select(field string, fields ...string) *TelegramUserStateUpdateOne {
	tusuo.fields = append([]string{field}, fields...)
	return tusuo
}

// Save executes the query and returns the updated TelegramUserState entity.
func (tusuo *TelegramUserStateUpdateOne) Save(ctx context.Context) (*TelegramUserState, error) {
	return withHooks(ctx, tusuo.sqlSave, tusuo.mutation, tusuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tusuo *TelegramUserStateUpdateOne) SaveX(ctx context.Context) *TelegramUserState {
	node, err := tusuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tusuo *TelegramUserStateUpdateOne) Exec(ctx context.Context) error {
	_, err := tusuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tusuo *TelegramUserStateUpdateOne) ExecX(ctx context.Context) {
	if err := tusuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tusuo *TelegramUserStateUpdateOne) sqlSave(ctx context.Context) (_node *TelegramUserState, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramuserstate.Table, telegramuserstate.Columns, sqlgraph.NewFieldSpec(telegramuserstate.FieldID, field.TypeInt64))
	id, ok := tusuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelegramUserState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tusuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telegramuserstate.FieldID)
		for _, f := range fields {
			if !telegramuserstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telegramuserstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tusuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tusuo.mutation.Qts(); ok {
		_spec.SetField(telegramuserstate.FieldQts, field.TypeInt, value)
	}
	if value, ok := tusuo.mutation.AddedQts(); ok {
		_spec.AddField(telegramuserstate.FieldQts, field.TypeInt, value)
	}
	if value, ok := tusuo.mutation.Pts(); ok {
		_spec.SetField(telegramuserstate.FieldPts, field.TypeInt, value)
	}
	if value, ok := tusuo.mutation.AddedPts(); ok {
		_spec.AddField(telegramuserstate.FieldPts, field.TypeInt, value)
	}
	if value, ok := tusuo.mutation.Date(); ok {
		_spec.SetField(telegramuserstate.FieldDate, field.TypeInt, value)
	}
	if value, ok := tusuo.mutation.AddedDate(); ok {
		_spec.AddField(telegramuserstate.FieldDate, field.TypeInt, value)
	}
	if value, ok := tusuo.mutation.Seq(); ok {
		_spec.SetField(telegramuserstate.FieldSeq, field.TypeInt, value)
	}
	if value, ok := tusuo.mutation.AddedSeq(); ok {
		_spec.AddField(telegramuserstate.FieldSeq, field.TypeInt, value)
	}
	if tusuo.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tusuo.mutation.RemovedChannelsIDs(); len(nodes) > 0 && !tusuo.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tusuo.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TelegramUserState{config: tusuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tusuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramuserstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tusuo.mutation.done = true
	return _node, nil
}
