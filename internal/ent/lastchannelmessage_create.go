// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/lastchannelmessage"
)

// LastChannelMessageCreate is the builder for creating a LastChannelMessage entity.
type LastChannelMessageCreate struct {
	config
	mutation *LastChannelMessageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMessageID sets the "message_id" field.
func (lcmc *LastChannelMessageCreate) SetMessageID(i int) *LastChannelMessageCreate {
	lcmc.mutation.SetMessageID(i)
	return lcmc
}

// SetID sets the "id" field.
func (lcmc *LastChannelMessageCreate) SetID(i int64) *LastChannelMessageCreate {
	lcmc.mutation.SetID(i)
	return lcmc
}

// Mutation returns the LastChannelMessageMutation object of the builder.
func (lcmc *LastChannelMessageCreate) Mutation() *LastChannelMessageMutation {
	return lcmc.mutation
}

// Save creates the LastChannelMessage in the database.
func (lcmc *LastChannelMessageCreate) Save(ctx context.Context) (*LastChannelMessage, error) {
	return withHooks(ctx, lcmc.sqlSave, lcmc.mutation, lcmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lcmc *LastChannelMessageCreate) SaveX(ctx context.Context) *LastChannelMessage {
	v, err := lcmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcmc *LastChannelMessageCreate) Exec(ctx context.Context) error {
	_, err := lcmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcmc *LastChannelMessageCreate) ExecX(ctx context.Context) {
	if err := lcmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcmc *LastChannelMessageCreate) check() error {
	if _, ok := lcmc.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`ent: missing required field "LastChannelMessage.message_id"`)}
	}
	return nil
}

func (lcmc *LastChannelMessageCreate) sqlSave(ctx context.Context) (*LastChannelMessage, error) {
	if err := lcmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lcmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lcmc.mutation.id = &_node.ID
	lcmc.mutation.done = true
	return _node, nil
}

func (lcmc *LastChannelMessageCreate) createSpec() (*LastChannelMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &LastChannelMessage{config: lcmc.config}
		_spec = sqlgraph.NewCreateSpec(lastchannelmessage.Table, sqlgraph.NewFieldSpec(lastchannelmessage.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = lcmc.conflict
	if id, ok := lcmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lcmc.mutation.MessageID(); ok {
		_spec.SetField(lastchannelmessage.FieldMessageID, field.TypeInt, value)
		_node.MessageID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LastChannelMessage.Create().
//		SetMessageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LastChannelMessageUpsert) {
//			SetMessageID(v+v).
//		}).
//		Exec(ctx)
func (lcmc *LastChannelMessageCreate) OnConflict(opts ...sql.ConflictOption) *LastChannelMessageUpsertOne {
	lcmc.conflict = opts
	return &LastChannelMessageUpsertOne{
		create: lcmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LastChannelMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcmc *LastChannelMessageCreate) OnConflictColumns(columns ...string) *LastChannelMessageUpsertOne {
	lcmc.conflict = append(lcmc.conflict, sql.ConflictColumns(columns...))
	return &LastChannelMessageUpsertOne{
		create: lcmc,
	}
}

type (
	// LastChannelMessageUpsertOne is the builder for "upsert"-ing
	//  one LastChannelMessage node.
	LastChannelMessageUpsertOne struct {
		create *LastChannelMessageCreate
	}

	// LastChannelMessageUpsert is the "OnConflict" setter.
	LastChannelMessageUpsert struct {
		*sql.UpdateSet
	}
)

// SetMessageID sets the "message_id" field.
func (u *LastChannelMessageUpsert) SetMessageID(v int) *LastChannelMessageUpsert {
	u.Set(lastchannelmessage.FieldMessageID, v)
	return u
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *LastChannelMessageUpsert) UpdateMessageID() *LastChannelMessageUpsert {
	u.SetExcluded(lastchannelmessage.FieldMessageID)
	return u
}

// AddMessageID adds v to the "message_id" field.
func (u *LastChannelMessageUpsert) AddMessageID(v int) *LastChannelMessageUpsert {
	u.Add(lastchannelmessage.FieldMessageID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LastChannelMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lastchannelmessage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LastChannelMessageUpsertOne) UpdateNewValues() *LastChannelMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(lastchannelmessage.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LastChannelMessage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LastChannelMessageUpsertOne) Ignore() *LastChannelMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LastChannelMessageUpsertOne) DoNothing() *LastChannelMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LastChannelMessageCreate.OnConflict
// documentation for more info.
func (u *LastChannelMessageUpsertOne) Update(set func(*LastChannelMessageUpsert)) *LastChannelMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LastChannelMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetMessageID sets the "message_id" field.
func (u *LastChannelMessageUpsertOne) SetMessageID(v int) *LastChannelMessageUpsertOne {
	return u.Update(func(s *LastChannelMessageUpsert) {
		s.SetMessageID(v)
	})
}

// AddMessageID adds v to the "message_id" field.
func (u *LastChannelMessageUpsertOne) AddMessageID(v int) *LastChannelMessageUpsertOne {
	return u.Update(func(s *LastChannelMessageUpsert) {
		s.AddMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *LastChannelMessageUpsertOne) UpdateMessageID() *LastChannelMessageUpsertOne {
	return u.Update(func(s *LastChannelMessageUpsert) {
		s.UpdateMessageID()
	})
}

// Exec executes the query.
func (u *LastChannelMessageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LastChannelMessageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LastChannelMessageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LastChannelMessageUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LastChannelMessageUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LastChannelMessageCreateBulk is the builder for creating many LastChannelMessage entities in bulk.
type LastChannelMessageCreateBulk struct {
	config
	err      error
	builders []*LastChannelMessageCreate
	conflict []sql.ConflictOption
}

// Save creates the LastChannelMessage entities in the database.
func (lcmcb *LastChannelMessageCreateBulk) Save(ctx context.Context) ([]*LastChannelMessage, error) {
	if lcmcb.err != nil {
		return nil, lcmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcmcb.builders))
	nodes := make([]*LastChannelMessage, len(lcmcb.builders))
	mutators := make([]Mutator, len(lcmcb.builders))
	for i := range lcmcb.builders {
		func(i int, root context.Context) {
			builder := lcmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LastChannelMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcmcb *LastChannelMessageCreateBulk) SaveX(ctx context.Context) []*LastChannelMessage {
	v, err := lcmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcmcb *LastChannelMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := lcmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcmcb *LastChannelMessageCreateBulk) ExecX(ctx context.Context) {
	if err := lcmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LastChannelMessage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LastChannelMessageUpsert) {
//			SetMessageID(v+v).
//		}).
//		Exec(ctx)
func (lcmcb *LastChannelMessageCreateBulk) OnConflict(opts ...sql.ConflictOption) *LastChannelMessageUpsertBulk {
	lcmcb.conflict = opts
	return &LastChannelMessageUpsertBulk{
		create: lcmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LastChannelMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcmcb *LastChannelMessageCreateBulk) OnConflictColumns(columns ...string) *LastChannelMessageUpsertBulk {
	lcmcb.conflict = append(lcmcb.conflict, sql.ConflictColumns(columns...))
	return &LastChannelMessageUpsertBulk{
		create: lcmcb,
	}
}

// LastChannelMessageUpsertBulk is the builder for "upsert"-ing
// a bulk of LastChannelMessage nodes.
type LastChannelMessageUpsertBulk struct {
	create *LastChannelMessageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LastChannelMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lastchannelmessage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LastChannelMessageUpsertBulk) UpdateNewValues() *LastChannelMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(lastchannelmessage.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LastChannelMessage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LastChannelMessageUpsertBulk) Ignore() *LastChannelMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LastChannelMessageUpsertBulk) DoNothing() *LastChannelMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LastChannelMessageCreateBulk.OnConflict
// documentation for more info.
func (u *LastChannelMessageUpsertBulk) Update(set func(*LastChannelMessageUpsert)) *LastChannelMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LastChannelMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetMessageID sets the "message_id" field.
func (u *LastChannelMessageUpsertBulk) SetMessageID(v int) *LastChannelMessageUpsertBulk {
	return u.Update(func(s *LastChannelMessageUpsert) {
		s.SetMessageID(v)
	})
}

// AddMessageID adds v to the "message_id" field.
func (u *LastChannelMessageUpsertBulk) AddMessageID(v int) *LastChannelMessageUpsertBulk {
	return u.Update(func(s *LastChannelMessageUpsert) {
		s.AddMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *LastChannelMessageUpsertBulk) UpdateMessageID() *LastChannelMessageUpsertBulk {
	return u.Update(func(s *LastChannelMessageUpsert) {
		s.UpdateMessageID()
	})
}

// Exec executes the query.
func (u *LastChannelMessageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LastChannelMessageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LastChannelMessageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LastChannelMessageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
