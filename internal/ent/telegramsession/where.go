// Code generated by ent, DO NOT EDIT.

package telegramsession

import (
	"entgo.io/ent/dialect/sql"
	"github.com/go-faster/bot/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldLTE(FieldID, id))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v []byte) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldEQ(FieldData, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v []byte) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v []byte) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...[]byte) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...[]byte) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v []byte) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v []byte) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v []byte) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v []byte) predicate.TelegramSession {
	return predicate.TelegramSession(sql.FieldLTE(FieldData, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TelegramSession) predicate.TelegramSession {
	return predicate.TelegramSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TelegramSession) predicate.TelegramSession {
	return predicate.TelegramSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TelegramSession) predicate.TelegramSession {
	return predicate.TelegramSession(sql.NotPredicates(p))
}
