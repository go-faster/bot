// Code generated by ent, DO NOT EDIT.

package repository

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the repository type in the database.
	Label = "repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldHTMLURL holds the string denoting the html_url field in the database.
	FieldHTMLURL = "html_url"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLastPushedAt holds the string denoting the last_pushed_at field in the database.
	FieldLastPushedAt = "last_pushed_at"
	// FieldLastEventAt holds the string denoting the last_event_at field in the database.
	FieldLastEventAt = "last_event_at"
	// Table holds the table name of the repository in the database.
	Table = "repositories"
)

// Columns holds all SQL columns for repository fields.
var Columns = []string{
	FieldID,
	FieldOwner,
	FieldName,
	FieldFullName,
	FieldHTMLURL,
	FieldDescription,
	FieldLastPushedAt,
	FieldLastEventAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
)

// OrderOption defines the ordering options for the Repository queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByHTMLURL orders the results by the html_url field.
func ByHTMLURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLURL, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLastPushedAt orders the results by the last_pushed_at field.
func ByLastPushedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastPushedAt, opts...).ToFunc()
}

// ByLastEventAt orders the results by the last_event_at field.
func ByLastEventAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastEventAt, opts...).ToFunc()
}
