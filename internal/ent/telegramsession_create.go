// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/telegramsession"
	"github.com/google/uuid"
)

// TelegramSessionCreate is the builder for creating a TelegramSession entity.
type TelegramSessionCreate struct {
	config
	mutation *TelegramSessionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetData sets the "data" field.
func (tsc *TelegramSessionCreate) SetData(b []byte) *TelegramSessionCreate {
	tsc.mutation.SetData(b)
	return tsc
}

// SetID sets the "id" field.
func (tsc *TelegramSessionCreate) SetID(u uuid.UUID) *TelegramSessionCreate {
	tsc.mutation.SetID(u)
	return tsc
}

// Mutation returns the TelegramSessionMutation object of the builder.
func (tsc *TelegramSessionCreate) Mutation() *TelegramSessionMutation {
	return tsc.mutation
}

// Save creates the TelegramSession in the database.
func (tsc *TelegramSessionCreate) Save(ctx context.Context) (*TelegramSession, error) {
	return withHooks(ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TelegramSessionCreate) SaveX(ctx context.Context) *TelegramSession {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TelegramSessionCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TelegramSessionCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TelegramSessionCreate) check() error {
	if _, ok := tsc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "TelegramSession.data"`)}
	}
	return nil
}

func (tsc *TelegramSessionCreate) sqlSave(ctx context.Context) (*TelegramSession, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TelegramSessionCreate) createSpec() (*TelegramSession, *sqlgraph.CreateSpec) {
	var (
		_node = &TelegramSession{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(telegramsession.Table, sqlgraph.NewFieldSpec(telegramsession.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = tsc.conflict
	if id, ok := tsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tsc.mutation.Data(); ok {
		_spec.SetField(telegramsession.FieldData, field.TypeBytes, value)
		_node.Data = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TelegramSession.Create().
//		SetData(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TelegramSessionUpsert) {
//			SetData(v+v).
//		}).
//		Exec(ctx)
func (tsc *TelegramSessionCreate) OnConflict(opts ...sql.ConflictOption) *TelegramSessionUpsertOne {
	tsc.conflict = opts
	return &TelegramSessionUpsertOne{
		create: tsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TelegramSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tsc *TelegramSessionCreate) OnConflictColumns(columns ...string) *TelegramSessionUpsertOne {
	tsc.conflict = append(tsc.conflict, sql.ConflictColumns(columns...))
	return &TelegramSessionUpsertOne{
		create: tsc,
	}
}

type (
	// TelegramSessionUpsertOne is the builder for "upsert"-ing
	//  one TelegramSession node.
	TelegramSessionUpsertOne struct {
		create *TelegramSessionCreate
	}

	// TelegramSessionUpsert is the "OnConflict" setter.
	TelegramSessionUpsert struct {
		*sql.UpdateSet
	}
)

// SetData sets the "data" field.
func (u *TelegramSessionUpsert) SetData(v []byte) *TelegramSessionUpsert {
	u.Set(telegramsession.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TelegramSessionUpsert) UpdateData() *TelegramSessionUpsert {
	u.SetExcluded(telegramsession.FieldData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TelegramSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(telegramsession.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TelegramSessionUpsertOne) UpdateNewValues() *TelegramSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(telegramsession.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TelegramSession.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TelegramSessionUpsertOne) Ignore() *TelegramSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TelegramSessionUpsertOne) DoNothing() *TelegramSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TelegramSessionCreate.OnConflict
// documentation for more info.
func (u *TelegramSessionUpsertOne) Update(set func(*TelegramSessionUpsert)) *TelegramSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TelegramSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetData sets the "data" field.
func (u *TelegramSessionUpsertOne) SetData(v []byte) *TelegramSessionUpsertOne {
	return u.Update(func(s *TelegramSessionUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TelegramSessionUpsertOne) UpdateData() *TelegramSessionUpsertOne {
	return u.Update(func(s *TelegramSessionUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *TelegramSessionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TelegramSessionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TelegramSessionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TelegramSessionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TelegramSessionUpsertOne.ID is not supported by MySQL driver. Use TelegramSessionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TelegramSessionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TelegramSessionCreateBulk is the builder for creating many TelegramSession entities in bulk.
type TelegramSessionCreateBulk struct {
	config
	builders []*TelegramSessionCreate
	conflict []sql.ConflictOption
}

// Save creates the TelegramSession entities in the database.
func (tscb *TelegramSessionCreateBulk) Save(ctx context.Context) ([]*TelegramSession, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TelegramSession, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelegramSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TelegramSessionCreateBulk) SaveX(ctx context.Context) []*TelegramSession {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TelegramSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TelegramSessionCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TelegramSession.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TelegramSessionUpsert) {
//			SetData(v+v).
//		}).
//		Exec(ctx)
func (tscb *TelegramSessionCreateBulk) OnConflict(opts ...sql.ConflictOption) *TelegramSessionUpsertBulk {
	tscb.conflict = opts
	return &TelegramSessionUpsertBulk{
		create: tscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TelegramSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tscb *TelegramSessionCreateBulk) OnConflictColumns(columns ...string) *TelegramSessionUpsertBulk {
	tscb.conflict = append(tscb.conflict, sql.ConflictColumns(columns...))
	return &TelegramSessionUpsertBulk{
		create: tscb,
	}
}

// TelegramSessionUpsertBulk is the builder for "upsert"-ing
// a bulk of TelegramSession nodes.
type TelegramSessionUpsertBulk struct {
	create *TelegramSessionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TelegramSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(telegramsession.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TelegramSessionUpsertBulk) UpdateNewValues() *TelegramSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(telegramsession.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TelegramSession.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TelegramSessionUpsertBulk) Ignore() *TelegramSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TelegramSessionUpsertBulk) DoNothing() *TelegramSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TelegramSessionCreateBulk.OnConflict
// documentation for more info.
func (u *TelegramSessionUpsertBulk) Update(set func(*TelegramSessionUpsert)) *TelegramSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TelegramSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetData sets the "data" field.
func (u *TelegramSessionUpsertBulk) SetData(v []byte) *TelegramSessionUpsertBulk {
	return u.Update(func(s *TelegramSessionUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TelegramSessionUpsertBulk) UpdateData() *TelegramSessionUpsertBulk {
	return u.Update(func(s *TelegramSessionUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *TelegramSessionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TelegramSessionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TelegramSessionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TelegramSessionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
