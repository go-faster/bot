// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/predicate"
	"github.com/go-faster/bot/internal/ent/telegramuserstate"
)

// TelegramUserStateDelete is the builder for deleting a TelegramUserState entity.
type TelegramUserStateDelete struct {
	config
	hooks    []Hook
	mutation *TelegramUserStateMutation
}

// Where appends a list predicates to the TelegramUserStateDelete builder.
func (tusd *TelegramUserStateDelete) Where(ps ...predicate.TelegramUserState) *TelegramUserStateDelete {
	tusd.mutation.Where(ps...)
	return tusd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tusd *TelegramUserStateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, TelegramUserStateMutation](ctx, tusd.sqlExec, tusd.mutation, tusd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tusd *TelegramUserStateDelete) ExecX(ctx context.Context) int {
	n, err := tusd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tusd *TelegramUserStateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(telegramuserstate.Table, sqlgraph.NewFieldSpec(telegramuserstate.FieldID, field.TypeInt64))
	if ps := tusd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tusd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tusd.mutation.done = true
	return affected, err
}

// TelegramUserStateDeleteOne is the builder for deleting a single TelegramUserState entity.
type TelegramUserStateDeleteOne struct {
	tusd *TelegramUserStateDelete
}

// Where appends a list predicates to the TelegramUserStateDelete builder.
func (tusdo *TelegramUserStateDeleteOne) Where(ps ...predicate.TelegramUserState) *TelegramUserStateDeleteOne {
	tusdo.tusd.mutation.Where(ps...)
	return tusdo
}

// Exec executes the deletion query.
func (tusdo *TelegramUserStateDeleteOne) Exec(ctx context.Context) error {
	n, err := tusdo.tusd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{telegramuserstate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tusdo *TelegramUserStateDeleteOne) ExecX(ctx context.Context) {
	if err := tusdo.Exec(ctx); err != nil {
		panic(err)
	}
}
