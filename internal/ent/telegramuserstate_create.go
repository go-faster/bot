// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/telegramchannelstate"
	"github.com/go-faster/bot/internal/ent/telegramuserstate"
)

// TelegramUserStateCreate is the builder for creating a TelegramUserState entity.
type TelegramUserStateCreate struct {
	config
	mutation *TelegramUserStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetQts sets the "qts" field.
func (tusc *TelegramUserStateCreate) SetQts(i int) *TelegramUserStateCreate {
	tusc.mutation.SetQts(i)
	return tusc
}

// SetPts sets the "pts" field.
func (tusc *TelegramUserStateCreate) SetPts(i int) *TelegramUserStateCreate {
	tusc.mutation.SetPts(i)
	return tusc
}

// SetDate sets the "date" field.
func (tusc *TelegramUserStateCreate) SetDate(i int) *TelegramUserStateCreate {
	tusc.mutation.SetDate(i)
	return tusc
}

// SetSeq sets the "seq" field.
func (tusc *TelegramUserStateCreate) SetSeq(i int) *TelegramUserStateCreate {
	tusc.mutation.SetSeq(i)
	return tusc
}

// SetID sets the "id" field.
func (tusc *TelegramUserStateCreate) SetID(i int64) *TelegramUserStateCreate {
	tusc.mutation.SetID(i)
	return tusc
}

// AddChannelIDs adds the "channels" edge to the TelegramChannelState entity by IDs.
func (tusc *TelegramUserStateCreate) AddChannelIDs(ids ...int) *TelegramUserStateCreate {
	tusc.mutation.AddChannelIDs(ids...)
	return tusc
}

// AddChannels adds the "channels" edges to the TelegramChannelState entity.
func (tusc *TelegramUserStateCreate) AddChannels(t ...*TelegramChannelState) *TelegramUserStateCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tusc.AddChannelIDs(ids...)
}

// Mutation returns the TelegramUserStateMutation object of the builder.
func (tusc *TelegramUserStateCreate) Mutation() *TelegramUserStateMutation {
	return tusc.mutation
}

// Save creates the TelegramUserState in the database.
func (tusc *TelegramUserStateCreate) Save(ctx context.Context) (*TelegramUserState, error) {
	return withHooks[*TelegramUserState, TelegramUserStateMutation](ctx, tusc.sqlSave, tusc.mutation, tusc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tusc *TelegramUserStateCreate) SaveX(ctx context.Context) *TelegramUserState {
	v, err := tusc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tusc *TelegramUserStateCreate) Exec(ctx context.Context) error {
	_, err := tusc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tusc *TelegramUserStateCreate) ExecX(ctx context.Context) {
	if err := tusc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tusc *TelegramUserStateCreate) check() error {
	if _, ok := tusc.mutation.Qts(); !ok {
		return &ValidationError{Name: "qts", err: errors.New(`ent: missing required field "TelegramUserState.qts"`)}
	}
	if _, ok := tusc.mutation.Pts(); !ok {
		return &ValidationError{Name: "pts", err: errors.New(`ent: missing required field "TelegramUserState.pts"`)}
	}
	if _, ok := tusc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "TelegramUserState.date"`)}
	}
	if _, ok := tusc.mutation.Seq(); !ok {
		return &ValidationError{Name: "seq", err: errors.New(`ent: missing required field "TelegramUserState.seq"`)}
	}
	return nil
}

func (tusc *TelegramUserStateCreate) sqlSave(ctx context.Context) (*TelegramUserState, error) {
	if err := tusc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tusc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tusc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tusc.mutation.id = &_node.ID
	tusc.mutation.done = true
	return _node, nil
}

func (tusc *TelegramUserStateCreate) createSpec() (*TelegramUserState, *sqlgraph.CreateSpec) {
	var (
		_node = &TelegramUserState{config: tusc.config}
		_spec = sqlgraph.NewCreateSpec(telegramuserstate.Table, sqlgraph.NewFieldSpec(telegramuserstate.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = tusc.conflict
	if id, ok := tusc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tusc.mutation.Qts(); ok {
		_spec.SetField(telegramuserstate.FieldQts, field.TypeInt, value)
		_node.Qts = value
	}
	if value, ok := tusc.mutation.Pts(); ok {
		_spec.SetField(telegramuserstate.FieldPts, field.TypeInt, value)
		_node.Pts = value
	}
	if value, ok := tusc.mutation.Date(); ok {
		_spec.SetField(telegramuserstate.FieldDate, field.TypeInt, value)
		_node.Date = value
	}
	if value, ok := tusc.mutation.Seq(); ok {
		_spec.SetField(telegramuserstate.FieldSeq, field.TypeInt, value)
		_node.Seq = value
	}
	if nodes := tusc.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   telegramuserstate.ChannelsTable,
			Columns: []string{telegramuserstate.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchannelstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TelegramUserState.Create().
//		SetQts(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TelegramUserStateUpsert) {
//			SetQts(v+v).
//		}).
//		Exec(ctx)
func (tusc *TelegramUserStateCreate) OnConflict(opts ...sql.ConflictOption) *TelegramUserStateUpsertOne {
	tusc.conflict = opts
	return &TelegramUserStateUpsertOne{
		create: tusc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TelegramUserState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tusc *TelegramUserStateCreate) OnConflictColumns(columns ...string) *TelegramUserStateUpsertOne {
	tusc.conflict = append(tusc.conflict, sql.ConflictColumns(columns...))
	return &TelegramUserStateUpsertOne{
		create: tusc,
	}
}

type (
	// TelegramUserStateUpsertOne is the builder for "upsert"-ing
	//  one TelegramUserState node.
	TelegramUserStateUpsertOne struct {
		create *TelegramUserStateCreate
	}

	// TelegramUserStateUpsert is the "OnConflict" setter.
	TelegramUserStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetQts sets the "qts" field.
func (u *TelegramUserStateUpsert) SetQts(v int) *TelegramUserStateUpsert {
	u.Set(telegramuserstate.FieldQts, v)
	return u
}

// UpdateQts sets the "qts" field to the value that was provided on create.
func (u *TelegramUserStateUpsert) UpdateQts() *TelegramUserStateUpsert {
	u.SetExcluded(telegramuserstate.FieldQts)
	return u
}

// AddQts adds v to the "qts" field.
func (u *TelegramUserStateUpsert) AddQts(v int) *TelegramUserStateUpsert {
	u.Add(telegramuserstate.FieldQts, v)
	return u
}

// SetPts sets the "pts" field.
func (u *TelegramUserStateUpsert) SetPts(v int) *TelegramUserStateUpsert {
	u.Set(telegramuserstate.FieldPts, v)
	return u
}

// UpdatePts sets the "pts" field to the value that was provided on create.
func (u *TelegramUserStateUpsert) UpdatePts() *TelegramUserStateUpsert {
	u.SetExcluded(telegramuserstate.FieldPts)
	return u
}

// AddPts adds v to the "pts" field.
func (u *TelegramUserStateUpsert) AddPts(v int) *TelegramUserStateUpsert {
	u.Add(telegramuserstate.FieldPts, v)
	return u
}

// SetDate sets the "date" field.
func (u *TelegramUserStateUpsert) SetDate(v int) *TelegramUserStateUpsert {
	u.Set(telegramuserstate.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *TelegramUserStateUpsert) UpdateDate() *TelegramUserStateUpsert {
	u.SetExcluded(telegramuserstate.FieldDate)
	return u
}

// AddDate adds v to the "date" field.
func (u *TelegramUserStateUpsert) AddDate(v int) *TelegramUserStateUpsert {
	u.Add(telegramuserstate.FieldDate, v)
	return u
}

// SetSeq sets the "seq" field.
func (u *TelegramUserStateUpsert) SetSeq(v int) *TelegramUserStateUpsert {
	u.Set(telegramuserstate.FieldSeq, v)
	return u
}

// UpdateSeq sets the "seq" field to the value that was provided on create.
func (u *TelegramUserStateUpsert) UpdateSeq() *TelegramUserStateUpsert {
	u.SetExcluded(telegramuserstate.FieldSeq)
	return u
}

// AddSeq adds v to the "seq" field.
func (u *TelegramUserStateUpsert) AddSeq(v int) *TelegramUserStateUpsert {
	u.Add(telegramuserstate.FieldSeq, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TelegramUserState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(telegramuserstate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TelegramUserStateUpsertOne) UpdateNewValues() *TelegramUserStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(telegramuserstate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TelegramUserState.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TelegramUserStateUpsertOne) Ignore() *TelegramUserStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TelegramUserStateUpsertOne) DoNothing() *TelegramUserStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TelegramUserStateCreate.OnConflict
// documentation for more info.
func (u *TelegramUserStateUpsertOne) Update(set func(*TelegramUserStateUpsert)) *TelegramUserStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TelegramUserStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetQts sets the "qts" field.
func (u *TelegramUserStateUpsertOne) SetQts(v int) *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.SetQts(v)
	})
}

// AddQts adds v to the "qts" field.
func (u *TelegramUserStateUpsertOne) AddQts(v int) *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.AddQts(v)
	})
}

// UpdateQts sets the "qts" field to the value that was provided on create.
func (u *TelegramUserStateUpsertOne) UpdateQts() *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.UpdateQts()
	})
}

// SetPts sets the "pts" field.
func (u *TelegramUserStateUpsertOne) SetPts(v int) *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.SetPts(v)
	})
}

// AddPts adds v to the "pts" field.
func (u *TelegramUserStateUpsertOne) AddPts(v int) *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.AddPts(v)
	})
}

// UpdatePts sets the "pts" field to the value that was provided on create.
func (u *TelegramUserStateUpsertOne) UpdatePts() *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.UpdatePts()
	})
}

// SetDate sets the "date" field.
func (u *TelegramUserStateUpsertOne) SetDate(v int) *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.SetDate(v)
	})
}

// AddDate adds v to the "date" field.
func (u *TelegramUserStateUpsertOne) AddDate(v int) *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.AddDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *TelegramUserStateUpsertOne) UpdateDate() *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.UpdateDate()
	})
}

// SetSeq sets the "seq" field.
func (u *TelegramUserStateUpsertOne) SetSeq(v int) *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.SetSeq(v)
	})
}

// AddSeq adds v to the "seq" field.
func (u *TelegramUserStateUpsertOne) AddSeq(v int) *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.AddSeq(v)
	})
}

// UpdateSeq sets the "seq" field to the value that was provided on create.
func (u *TelegramUserStateUpsertOne) UpdateSeq() *TelegramUserStateUpsertOne {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.UpdateSeq()
	})
}

// Exec executes the query.
func (u *TelegramUserStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TelegramUserStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TelegramUserStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TelegramUserStateUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TelegramUserStateUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TelegramUserStateCreateBulk is the builder for creating many TelegramUserState entities in bulk.
type TelegramUserStateCreateBulk struct {
	config
	builders []*TelegramUserStateCreate
	conflict []sql.ConflictOption
}

// Save creates the TelegramUserState entities in the database.
func (tuscb *TelegramUserStateCreateBulk) Save(ctx context.Context) ([]*TelegramUserState, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tuscb.builders))
	nodes := make([]*TelegramUserState, len(tuscb.builders))
	mutators := make([]Mutator, len(tuscb.builders))
	for i := range tuscb.builders {
		func(i int, root context.Context) {
			builder := tuscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelegramUserStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tuscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tuscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tuscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tuscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tuscb *TelegramUserStateCreateBulk) SaveX(ctx context.Context) []*TelegramUserState {
	v, err := tuscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tuscb *TelegramUserStateCreateBulk) Exec(ctx context.Context) error {
	_, err := tuscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuscb *TelegramUserStateCreateBulk) ExecX(ctx context.Context) {
	if err := tuscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TelegramUserState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TelegramUserStateUpsert) {
//			SetQts(v+v).
//		}).
//		Exec(ctx)
func (tuscb *TelegramUserStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *TelegramUserStateUpsertBulk {
	tuscb.conflict = opts
	return &TelegramUserStateUpsertBulk{
		create: tuscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TelegramUserState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tuscb *TelegramUserStateCreateBulk) OnConflictColumns(columns ...string) *TelegramUserStateUpsertBulk {
	tuscb.conflict = append(tuscb.conflict, sql.ConflictColumns(columns...))
	return &TelegramUserStateUpsertBulk{
		create: tuscb,
	}
}

// TelegramUserStateUpsertBulk is the builder for "upsert"-ing
// a bulk of TelegramUserState nodes.
type TelegramUserStateUpsertBulk struct {
	create *TelegramUserStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TelegramUserState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(telegramuserstate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TelegramUserStateUpsertBulk) UpdateNewValues() *TelegramUserStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(telegramuserstate.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TelegramUserState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TelegramUserStateUpsertBulk) Ignore() *TelegramUserStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TelegramUserStateUpsertBulk) DoNothing() *TelegramUserStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TelegramUserStateCreateBulk.OnConflict
// documentation for more info.
func (u *TelegramUserStateUpsertBulk) Update(set func(*TelegramUserStateUpsert)) *TelegramUserStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TelegramUserStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetQts sets the "qts" field.
func (u *TelegramUserStateUpsertBulk) SetQts(v int) *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.SetQts(v)
	})
}

// AddQts adds v to the "qts" field.
func (u *TelegramUserStateUpsertBulk) AddQts(v int) *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.AddQts(v)
	})
}

// UpdateQts sets the "qts" field to the value that was provided on create.
func (u *TelegramUserStateUpsertBulk) UpdateQts() *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.UpdateQts()
	})
}

// SetPts sets the "pts" field.
func (u *TelegramUserStateUpsertBulk) SetPts(v int) *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.SetPts(v)
	})
}

// AddPts adds v to the "pts" field.
func (u *TelegramUserStateUpsertBulk) AddPts(v int) *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.AddPts(v)
	})
}

// UpdatePts sets the "pts" field to the value that was provided on create.
func (u *TelegramUserStateUpsertBulk) UpdatePts() *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.UpdatePts()
	})
}

// SetDate sets the "date" field.
func (u *TelegramUserStateUpsertBulk) SetDate(v int) *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.SetDate(v)
	})
}

// AddDate adds v to the "date" field.
func (u *TelegramUserStateUpsertBulk) AddDate(v int) *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.AddDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *TelegramUserStateUpsertBulk) UpdateDate() *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.UpdateDate()
	})
}

// SetSeq sets the "seq" field.
func (u *TelegramUserStateUpsertBulk) SetSeq(v int) *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.SetSeq(v)
	})
}

// AddSeq adds v to the "seq" field.
func (u *TelegramUserStateUpsertBulk) AddSeq(v int) *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.AddSeq(v)
	})
}

// UpdateSeq sets the "seq" field to the value that was provided on create.
func (u *TelegramUserStateUpsertBulk) UpdateSeq() *TelegramUserStateUpsertBulk {
	return u.Update(func(s *TelegramUserStateUpsert) {
		s.UpdateSeq()
	})
}

// Exec executes the query.
func (u *TelegramUserStateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TelegramUserStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TelegramUserStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TelegramUserStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
