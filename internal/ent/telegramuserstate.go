// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-faster/bot/internal/ent/telegramuserstate"
)

// TelegramUserState is the model entity for the TelegramUserState schema.
type TelegramUserState struct {
	config `json:"-"`
	// ID of the ent.
	// User ID
	ID int64 `json:"id,omitempty"`
	// Qts holds the value of the "qts" field.
	Qts int `json:"qts,omitempty"`
	// Pts holds the value of the "pts" field.
	Pts int `json:"pts,omitempty"`
	// Date holds the value of the "date" field.
	Date int `json:"date,omitempty"`
	// Seq holds the value of the "seq" field.
	Seq int `json:"seq,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TelegramUserStateQuery when eager-loading is set.
	Edges        TelegramUserStateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TelegramUserStateEdges holds the relations/edges for other nodes in the graph.
type TelegramUserStateEdges struct {
	// Channels holds the value of the channels edge.
	Channels []*TelegramChannelState `json:"channels,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes   [1]bool
	namedChannels map[string][]*TelegramChannelState
}

// ChannelsOrErr returns the Channels value or an error if the edge
// was not loaded in eager-loading.
func (e TelegramUserStateEdges) ChannelsOrErr() ([]*TelegramChannelState, error) {
	if e.loadedTypes[0] {
		return e.Channels, nil
	}
	return nil, &NotLoadedError{edge: "channels"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TelegramUserState) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case telegramuserstate.FieldID, telegramuserstate.FieldQts, telegramuserstate.FieldPts, telegramuserstate.FieldDate, telegramuserstate.FieldSeq:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TelegramUserState fields.
func (tus *TelegramUserState) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telegramuserstate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tus.ID = int64(value.Int64)
		case telegramuserstate.FieldQts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field qts", values[i])
			} else if value.Valid {
				tus.Qts = int(value.Int64)
			}
		case telegramuserstate.FieldPts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pts", values[i])
			} else if value.Valid {
				tus.Pts = int(value.Int64)
			}
		case telegramuserstate.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				tus.Date = int(value.Int64)
			}
		case telegramuserstate.FieldSeq:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seq", values[i])
			} else if value.Valid {
				tus.Seq = int(value.Int64)
			}
		default:
			tus.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TelegramUserState.
// This includes values selected through modifiers, order, etc.
func (tus *TelegramUserState) Value(name string) (ent.Value, error) {
	return tus.selectValues.Get(name)
}

// QueryChannels queries the "channels" edge of the TelegramUserState entity.
func (tus *TelegramUserState) QueryChannels() *TelegramChannelStateQuery {
	return NewTelegramUserStateClient(tus.config).QueryChannels(tus)
}

// Update returns a builder for updating this TelegramUserState.
// Note that you need to call TelegramUserState.Unwrap() before calling this method if this TelegramUserState
// was returned from a transaction, and the transaction was committed or rolled back.
func (tus *TelegramUserState) Update() *TelegramUserStateUpdateOne {
	return NewTelegramUserStateClient(tus.config).UpdateOne(tus)
}

// Unwrap unwraps the TelegramUserState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tus *TelegramUserState) Unwrap() *TelegramUserState {
	_tx, ok := tus.config.driver.(*txDriver)
	if !ok {
		panic("ent: TelegramUserState is not a transactional entity")
	}
	tus.config.driver = _tx.drv
	return tus
}

// String implements the fmt.Stringer.
func (tus *TelegramUserState) String() string {
	var builder strings.Builder
	builder.WriteString("TelegramUserState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tus.ID))
	builder.WriteString("qts=")
	builder.WriteString(fmt.Sprintf("%v", tus.Qts))
	builder.WriteString(", ")
	builder.WriteString("pts=")
	builder.WriteString(fmt.Sprintf("%v", tus.Pts))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", tus.Date))
	builder.WriteString(", ")
	builder.WriteString("seq=")
	builder.WriteString(fmt.Sprintf("%v", tus.Seq))
	builder.WriteByte(')')
	return builder.String()
}

// NamedChannels returns the Channels named value or an error if the edge was not
// loaded in eager-loading with this name.
func (tus *TelegramUserState) NamedChannels(name string) ([]*TelegramChannelState, error) {
	if tus.Edges.namedChannels == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := tus.Edges.namedChannels[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (tus *TelegramUserState) appendNamedChannels(name string, edges ...*TelegramChannelState) {
	if tus.Edges.namedChannels == nil {
		tus.Edges.namedChannels = make(map[string][]*TelegramChannelState)
	}
	if len(edges) == 0 {
		tus.Edges.namedChannels[name] = []*TelegramChannelState{}
	} else {
		tus.Edges.namedChannels[name] = append(tus.Edges.namedChannels[name], edges...)
	}
}

// TelegramUserStates is a parsable slice of TelegramUserState.
type TelegramUserStates []*TelegramUserState
