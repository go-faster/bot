// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-faster/bot/internal/ent/gptdialog"
)

// GPTDialog is the model entity for the GPTDialog schema.
type GPTDialog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Peer ID
	PeerID string `json:"peer_id,omitempty"`
	// Telegram message id of prompt message.
	PromptMsgID int `json:"prompt_msg_id,omitempty"`
	// Prompt message.
	PromptMsg string `json:"prompt_msg,omitempty"`
	// Telegram message id of sent message.
	GptMsgID int `json:"gpt_msg_id,omitempty"`
	// AI-generated message. Does not include prompt.
	GptMsg string `json:"gpt_msg,omitempty"`
	// Telegram thread's top message id.
	ThreadTopMsgID int `json:"thread_top_msg_id,omitempty"`
	// Message generation time. To simplify cleanup.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GPTDialog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gptdialog.FieldID, gptdialog.FieldPromptMsgID, gptdialog.FieldGptMsgID, gptdialog.FieldThreadTopMsgID:
			values[i] = new(sql.NullInt64)
		case gptdialog.FieldPeerID, gptdialog.FieldPromptMsg, gptdialog.FieldGptMsg:
			values[i] = new(sql.NullString)
		case gptdialog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GPTDialog fields.
func (_m *GPTDialog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gptdialog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case gptdialog.FieldPeerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field peer_id", values[i])
			} else if value.Valid {
				_m.PeerID = value.String
			}
		case gptdialog.FieldPromptMsgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_msg_id", values[i])
			} else if value.Valid {
				_m.PromptMsgID = int(value.Int64)
			}
		case gptdialog.FieldPromptMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_msg", values[i])
			} else if value.Valid {
				_m.PromptMsg = value.String
			}
		case gptdialog.FieldGptMsgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gpt_msg_id", values[i])
			} else if value.Valid {
				_m.GptMsgID = int(value.Int64)
			}
		case gptdialog.FieldGptMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gpt_msg", values[i])
			} else if value.Valid {
				_m.GptMsg = value.String
			}
		case gptdialog.FieldThreadTopMsgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field thread_top_msg_id", values[i])
			} else if value.Valid {
				_m.ThreadTopMsgID = int(value.Int64)
			}
		case gptdialog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GPTDialog.
// This includes values selected through modifiers, order, etc.
func (_m *GPTDialog) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this GPTDialog.
// Note that you need to call GPTDialog.Unwrap() before calling this method if this GPTDialog
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *GPTDialog) Update() *GPTDialogUpdateOne {
	return NewGPTDialogClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the GPTDialog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *GPTDialog) Unwrap() *GPTDialog {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: GPTDialog is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *GPTDialog) String() string {
	var builder strings.Builder
	builder.WriteString("GPTDialog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("peer_id=")
	builder.WriteString(_m.PeerID)
	builder.WriteString(", ")
	builder.WriteString("prompt_msg_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.PromptMsgID))
	builder.WriteString(", ")
	builder.WriteString("prompt_msg=")
	builder.WriteString(_m.PromptMsg)
	builder.WriteString(", ")
	builder.WriteString("gpt_msg_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.GptMsgID))
	builder.WriteString(", ")
	builder.WriteString("gpt_msg=")
	builder.WriteString(_m.GptMsg)
	builder.WriteString(", ")
	builder.WriteString("thread_top_msg_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ThreadTopMsgID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GPTDialogs is a parsable slice of GPTDialog.
type GPTDialogs []*GPTDialog
