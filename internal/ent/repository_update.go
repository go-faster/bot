// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/gitcommit"
	"github.com/go-faster/bot/internal/ent/organization"
	"github.com/go-faster/bot/internal/ent/predicate"
	"github.com/go-faster/bot/internal/ent/repository"
)

// RepositoryUpdate is the builder for updating Repository entities.
type RepositoryUpdate struct {
	config
	hooks    []Hook
	mutation *RepositoryMutation
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (_u *RepositoryUpdate) Where(ps ...predicate.Repository) *RepositoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *RepositoryUpdate) SetName(v string) *RepositoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableName(v *string) *RepositoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetFullName sets the "full_name" field.
func (_u *RepositoryUpdate) SetFullName(v string) *RepositoryUpdate {
	_u.mutation.SetFullName(v)
	return _u
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableFullName(v *string) *RepositoryUpdate {
	if v != nil {
		_u.SetFullName(*v)
	}
	return _u
}

// SetHTMLURL sets the "html_url" field.
func (_u *RepositoryUpdate) SetHTMLURL(v string) *RepositoryUpdate {
	_u.mutation.SetHTMLURL(v)
	return _u
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableHTMLURL(v *string) *RepositoryUpdate {
	if v != nil {
		_u.SetHTMLURL(*v)
	}
	return _u
}

// ClearHTMLURL clears the value of the "html_url" field.
func (_u *RepositoryUpdate) ClearHTMLURL() *RepositoryUpdate {
	_u.mutation.ClearHTMLURL()
	return _u
}

// SetDescription sets the "description" field.
func (_u *RepositoryUpdate) SetDescription(v string) *RepositoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableDescription(v *string) *RepositoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetLastPushedAt sets the "last_pushed_at" field.
func (_u *RepositoryUpdate) SetLastPushedAt(v time.Time) *RepositoryUpdate {
	_u.mutation.SetLastPushedAt(v)
	return _u
}

// SetNillableLastPushedAt sets the "last_pushed_at" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableLastPushedAt(v *time.Time) *RepositoryUpdate {
	if v != nil {
		_u.SetLastPushedAt(*v)
	}
	return _u
}

// ClearLastPushedAt clears the value of the "last_pushed_at" field.
func (_u *RepositoryUpdate) ClearLastPushedAt() *RepositoryUpdate {
	_u.mutation.ClearLastPushedAt()
	return _u
}

// SetLastEventAt sets the "last_event_at" field.
func (_u *RepositoryUpdate) SetLastEventAt(v time.Time) *RepositoryUpdate {
	_u.mutation.SetLastEventAt(v)
	return _u
}

// SetNillableLastEventAt sets the "last_event_at" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableLastEventAt(v *time.Time) *RepositoryUpdate {
	if v != nil {
		_u.SetLastEventAt(*v)
	}
	return _u
}

// ClearLastEventAt clears the value of the "last_event_at" field.
func (_u *RepositoryUpdate) ClearLastEventAt() *RepositoryUpdate {
	_u.mutation.ClearLastEventAt()
	return _u
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (_u *RepositoryUpdate) SetOrganizationID(id int64) *RepositoryUpdate {
	_u.mutation.SetOrganizationID(id)
	return _u
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableOrganizationID(id *int64) *RepositoryUpdate {
	if id != nil {
		_u = _u.SetOrganizationID(*id)
	}
	return _u
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *RepositoryUpdate) SetOrganization(v *Organization) *RepositoryUpdate {
	return _u.SetOrganizationID(v.ID)
}

// AddCommitIDs adds the "commits" edge to the GitCommit entity by IDs.
func (_u *RepositoryUpdate) AddCommitIDs(ids ...string) *RepositoryUpdate {
	_u.mutation.AddCommitIDs(ids...)
	return _u
}

// AddCommits adds the "commits" edges to the GitCommit entity.
func (_u *RepositoryUpdate) AddCommits(v ...*GitCommit) *RepositoryUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCommitIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (_u *RepositoryUpdate) Mutation() *RepositoryMutation {
	return _u.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *RepositoryUpdate) ClearOrganization() *RepositoryUpdate {
	_u.mutation.ClearOrganization()
	return _u
}

// ClearCommits clears all "commits" edges to the GitCommit entity.
func (_u *RepositoryUpdate) ClearCommits() *RepositoryUpdate {
	_u.mutation.ClearCommits()
	return _u
}

// RemoveCommitIDs removes the "commits" edge to GitCommit entities by IDs.
func (_u *RepositoryUpdate) RemoveCommitIDs(ids ...string) *RepositoryUpdate {
	_u.mutation.RemoveCommitIDs(ids...)
	return _u
}

// RemoveCommits removes "commits" edges to GitCommit entities.
func (_u *RepositoryUpdate) RemoveCommits(v ...*GitCommit) *RepositoryUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCommitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RepositoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RepositoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RepositoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *RepositoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.FullName(); ok {
		_spec.SetField(repository.FieldFullName, field.TypeString, value)
	}
	if value, ok := _u.mutation.HTMLURL(); ok {
		_spec.SetField(repository.FieldHTMLURL, field.TypeString, value)
	}
	if _u.mutation.HTMLURLCleared() {
		_spec.ClearField(repository.FieldHTMLURL, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastPushedAt(); ok {
		_spec.SetField(repository.FieldLastPushedAt, field.TypeTime, value)
	}
	if _u.mutation.LastPushedAtCleared() {
		_spec.ClearField(repository.FieldLastPushedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastEventAt(); ok {
		_spec.SetField(repository.FieldLastEventAt, field.TypeTime, value)
	}
	if _u.mutation.LastEventAtCleared() {
		_spec.ClearField(repository.FieldLastEventAt, field.TypeTime)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.OrganizationTable,
			Columns: []string{repository.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.OrganizationTable,
			Columns: []string{repository.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.CommitsTable,
			Columns: []string{repository.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gitcommit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCommitsIDs(); len(nodes) > 0 && !_u.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.CommitsTable,
			Columns: []string{repository.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gitcommit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.CommitsTable,
			Columns: []string{repository.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gitcommit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RepositoryUpdateOne is the builder for updating a single Repository entity.
type RepositoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepositoryMutation
}

// SetName sets the "name" field.
func (_u *RepositoryUpdateOne) SetName(v string) *RepositoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableName(v *string) *RepositoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetFullName sets the "full_name" field.
func (_u *RepositoryUpdateOne) SetFullName(v string) *RepositoryUpdateOne {
	_u.mutation.SetFullName(v)
	return _u
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableFullName(v *string) *RepositoryUpdateOne {
	if v != nil {
		_u.SetFullName(*v)
	}
	return _u
}

// SetHTMLURL sets the "html_url" field.
func (_u *RepositoryUpdateOne) SetHTMLURL(v string) *RepositoryUpdateOne {
	_u.mutation.SetHTMLURL(v)
	return _u
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableHTMLURL(v *string) *RepositoryUpdateOne {
	if v != nil {
		_u.SetHTMLURL(*v)
	}
	return _u
}

// ClearHTMLURL clears the value of the "html_url" field.
func (_u *RepositoryUpdateOne) ClearHTMLURL() *RepositoryUpdateOne {
	_u.mutation.ClearHTMLURL()
	return _u
}

// SetDescription sets the "description" field.
func (_u *RepositoryUpdateOne) SetDescription(v string) *RepositoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableDescription(v *string) *RepositoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetLastPushedAt sets the "last_pushed_at" field.
func (_u *RepositoryUpdateOne) SetLastPushedAt(v time.Time) *RepositoryUpdateOne {
	_u.mutation.SetLastPushedAt(v)
	return _u
}

// SetNillableLastPushedAt sets the "last_pushed_at" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableLastPushedAt(v *time.Time) *RepositoryUpdateOne {
	if v != nil {
		_u.SetLastPushedAt(*v)
	}
	return _u
}

// ClearLastPushedAt clears the value of the "last_pushed_at" field.
func (_u *RepositoryUpdateOne) ClearLastPushedAt() *RepositoryUpdateOne {
	_u.mutation.ClearLastPushedAt()
	return _u
}

// SetLastEventAt sets the "last_event_at" field.
func (_u *RepositoryUpdateOne) SetLastEventAt(v time.Time) *RepositoryUpdateOne {
	_u.mutation.SetLastEventAt(v)
	return _u
}

// SetNillableLastEventAt sets the "last_event_at" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableLastEventAt(v *time.Time) *RepositoryUpdateOne {
	if v != nil {
		_u.SetLastEventAt(*v)
	}
	return _u
}

// ClearLastEventAt clears the value of the "last_event_at" field.
func (_u *RepositoryUpdateOne) ClearLastEventAt() *RepositoryUpdateOne {
	_u.mutation.ClearLastEventAt()
	return _u
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (_u *RepositoryUpdateOne) SetOrganizationID(id int64) *RepositoryUpdateOne {
	_u.mutation.SetOrganizationID(id)
	return _u
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableOrganizationID(id *int64) *RepositoryUpdateOne {
	if id != nil {
		_u = _u.SetOrganizationID(*id)
	}
	return _u
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *RepositoryUpdateOne) SetOrganization(v *Organization) *RepositoryUpdateOne {
	return _u.SetOrganizationID(v.ID)
}

// AddCommitIDs adds the "commits" edge to the GitCommit entity by IDs.
func (_u *RepositoryUpdateOne) AddCommitIDs(ids ...string) *RepositoryUpdateOne {
	_u.mutation.AddCommitIDs(ids...)
	return _u
}

// AddCommits adds the "commits" edges to the GitCommit entity.
func (_u *RepositoryUpdateOne) AddCommits(v ...*GitCommit) *RepositoryUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCommitIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (_u *RepositoryUpdateOne) Mutation() *RepositoryMutation {
	return _u.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *RepositoryUpdateOne) ClearOrganization() *RepositoryUpdateOne {
	_u.mutation.ClearOrganization()
	return _u
}

// ClearCommits clears all "commits" edges to the GitCommit entity.
func (_u *RepositoryUpdateOne) ClearCommits() *RepositoryUpdateOne {
	_u.mutation.ClearCommits()
	return _u
}

// RemoveCommitIDs removes the "commits" edge to GitCommit entities by IDs.
func (_u *RepositoryUpdateOne) RemoveCommitIDs(ids ...string) *RepositoryUpdateOne {
	_u.mutation.RemoveCommitIDs(ids...)
	return _u
}

// RemoveCommits removes "commits" edges to GitCommit entities.
func (_u *RepositoryUpdateOne) RemoveCommits(v ...*GitCommit) *RepositoryUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCommitIDs(ids...)
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (_u *RepositoryUpdateOne) Where(ps ...predicate.Repository) *RepositoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RepositoryUpdateOne) Select(field string, fields ...string) *RepositoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Repository entity.
func (_u *RepositoryUpdateOne) Save(ctx context.Context) (*Repository, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RepositoryUpdateOne) SaveX(ctx context.Context) *Repository {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *RepositoryUpdateOne) sqlSave(ctx context.Context) (_node *Repository, err error) {
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for _, f := range fields {
			if !repository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.FullName(); ok {
		_spec.SetField(repository.FieldFullName, field.TypeString, value)
	}
	if value, ok := _u.mutation.HTMLURL(); ok {
		_spec.SetField(repository.FieldHTMLURL, field.TypeString, value)
	}
	if _u.mutation.HTMLURLCleared() {
		_spec.ClearField(repository.FieldHTMLURL, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastPushedAt(); ok {
		_spec.SetField(repository.FieldLastPushedAt, field.TypeTime, value)
	}
	if _u.mutation.LastPushedAtCleared() {
		_spec.ClearField(repository.FieldLastPushedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastEventAt(); ok {
		_spec.SetField(repository.FieldLastEventAt, field.TypeTime, value)
	}
	if _u.mutation.LastEventAtCleared() {
		_spec.ClearField(repository.FieldLastEventAt, field.TypeTime)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.OrganizationTable,
			Columns: []string{repository.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.OrganizationTable,
			Columns: []string{repository.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.CommitsTable,
			Columns: []string{repository.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gitcommit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCommitsIDs(); len(nodes) > 0 && !_u.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.CommitsTable,
			Columns: []string{repository.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gitcommit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.CommitsTable,
			Columns: []string{repository.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gitcommit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repository{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
