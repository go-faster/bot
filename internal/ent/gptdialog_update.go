// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/gptdialog"
	"github.com/go-faster/bot/internal/ent/predicate"
)

// GPTDialogUpdate is the builder for updating GPTDialog entities.
type GPTDialogUpdate struct {
	config
	hooks    []Hook
	mutation *GPTDialogMutation
}

// Where appends a list predicates to the GPTDialogUpdate builder.
func (_u *GPTDialogUpdate) Where(ps ...predicate.GPTDialog) *GPTDialogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPromptMsgID sets the "prompt_msg_id" field.
func (_u *GPTDialogUpdate) SetPromptMsgID(v int) *GPTDialogUpdate {
	_u.mutation.ResetPromptMsgID()
	_u.mutation.SetPromptMsgID(v)
	return _u
}

// SetNillablePromptMsgID sets the "prompt_msg_id" field if the given value is not nil.
func (_u *GPTDialogUpdate) SetNillablePromptMsgID(v *int) *GPTDialogUpdate {
	if v != nil {
		_u.SetPromptMsgID(*v)
	}
	return _u
}

// AddPromptMsgID adds value to the "prompt_msg_id" field.
func (_u *GPTDialogUpdate) AddPromptMsgID(v int) *GPTDialogUpdate {
	_u.mutation.AddPromptMsgID(v)
	return _u
}

// SetPromptMsg sets the "prompt_msg" field.
func (_u *GPTDialogUpdate) SetPromptMsg(v string) *GPTDialogUpdate {
	_u.mutation.SetPromptMsg(v)
	return _u
}

// SetNillablePromptMsg sets the "prompt_msg" field if the given value is not nil.
func (_u *GPTDialogUpdate) SetNillablePromptMsg(v *string) *GPTDialogUpdate {
	if v != nil {
		_u.SetPromptMsg(*v)
	}
	return _u
}

// SetGptMsgID sets the "gpt_msg_id" field.
func (_u *GPTDialogUpdate) SetGptMsgID(v int) *GPTDialogUpdate {
	_u.mutation.ResetGptMsgID()
	_u.mutation.SetGptMsgID(v)
	return _u
}

// SetNillableGptMsgID sets the "gpt_msg_id" field if the given value is not nil.
func (_u *GPTDialogUpdate) SetNillableGptMsgID(v *int) *GPTDialogUpdate {
	if v != nil {
		_u.SetGptMsgID(*v)
	}
	return _u
}

// AddGptMsgID adds value to the "gpt_msg_id" field.
func (_u *GPTDialogUpdate) AddGptMsgID(v int) *GPTDialogUpdate {
	_u.mutation.AddGptMsgID(v)
	return _u
}

// SetGptMsg sets the "gpt_msg" field.
func (_u *GPTDialogUpdate) SetGptMsg(v string) *GPTDialogUpdate {
	_u.mutation.SetGptMsg(v)
	return _u
}

// SetNillableGptMsg sets the "gpt_msg" field if the given value is not nil.
func (_u *GPTDialogUpdate) SetNillableGptMsg(v *string) *GPTDialogUpdate {
	if v != nil {
		_u.SetGptMsg(*v)
	}
	return _u
}

// SetThreadTopMsgID sets the "thread_top_msg_id" field.
func (_u *GPTDialogUpdate) SetThreadTopMsgID(v int) *GPTDialogUpdate {
	_u.mutation.ResetThreadTopMsgID()
	_u.mutation.SetThreadTopMsgID(v)
	return _u
}

// SetNillableThreadTopMsgID sets the "thread_top_msg_id" field if the given value is not nil.
func (_u *GPTDialogUpdate) SetNillableThreadTopMsgID(v *int) *GPTDialogUpdate {
	if v != nil {
		_u.SetThreadTopMsgID(*v)
	}
	return _u
}

// AddThreadTopMsgID adds value to the "thread_top_msg_id" field.
func (_u *GPTDialogUpdate) AddThreadTopMsgID(v int) *GPTDialogUpdate {
	_u.mutation.AddThreadTopMsgID(v)
	return _u
}

// ClearThreadTopMsgID clears the value of the "thread_top_msg_id" field.
func (_u *GPTDialogUpdate) ClearThreadTopMsgID() *GPTDialogUpdate {
	_u.mutation.ClearThreadTopMsgID()
	return _u
}

// Mutation returns the GPTDialogMutation object of the builder.
func (_u *GPTDialogUpdate) Mutation() *GPTDialogMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GPTDialogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GPTDialogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GPTDialogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GPTDialogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *GPTDialogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gptdialog.Table, gptdialog.Columns, sqlgraph.NewFieldSpec(gptdialog.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PromptMsgID(); ok {
		_spec.SetField(gptdialog.FieldPromptMsgID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPromptMsgID(); ok {
		_spec.AddField(gptdialog.FieldPromptMsgID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PromptMsg(); ok {
		_spec.SetField(gptdialog.FieldPromptMsg, field.TypeString, value)
	}
	if value, ok := _u.mutation.GptMsgID(); ok {
		_spec.SetField(gptdialog.FieldGptMsgID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedGptMsgID(); ok {
		_spec.AddField(gptdialog.FieldGptMsgID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.GptMsg(); ok {
		_spec.SetField(gptdialog.FieldGptMsg, field.TypeString, value)
	}
	if value, ok := _u.mutation.ThreadTopMsgID(); ok {
		_spec.SetField(gptdialog.FieldThreadTopMsgID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedThreadTopMsgID(); ok {
		_spec.AddField(gptdialog.FieldThreadTopMsgID, field.TypeInt, value)
	}
	if _u.mutation.ThreadTopMsgIDCleared() {
		_spec.ClearField(gptdialog.FieldThreadTopMsgID, field.TypeInt)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gptdialog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GPTDialogUpdateOne is the builder for updating a single GPTDialog entity.
type GPTDialogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GPTDialogMutation
}

// SetPromptMsgID sets the "prompt_msg_id" field.
func (_u *GPTDialogUpdateOne) SetPromptMsgID(v int) *GPTDialogUpdateOne {
	_u.mutation.ResetPromptMsgID()
	_u.mutation.SetPromptMsgID(v)
	return _u
}

// SetNillablePromptMsgID sets the "prompt_msg_id" field if the given value is not nil.
func (_u *GPTDialogUpdateOne) SetNillablePromptMsgID(v *int) *GPTDialogUpdateOne {
	if v != nil {
		_u.SetPromptMsgID(*v)
	}
	return _u
}

// AddPromptMsgID adds value to the "prompt_msg_id" field.
func (_u *GPTDialogUpdateOne) AddPromptMsgID(v int) *GPTDialogUpdateOne {
	_u.mutation.AddPromptMsgID(v)
	return _u
}

// SetPromptMsg sets the "prompt_msg" field.
func (_u *GPTDialogUpdateOne) SetPromptMsg(v string) *GPTDialogUpdateOne {
	_u.mutation.SetPromptMsg(v)
	return _u
}

// SetNillablePromptMsg sets the "prompt_msg" field if the given value is not nil.
func (_u *GPTDialogUpdateOne) SetNillablePromptMsg(v *string) *GPTDialogUpdateOne {
	if v != nil {
		_u.SetPromptMsg(*v)
	}
	return _u
}

// SetGptMsgID sets the "gpt_msg_id" field.
func (_u *GPTDialogUpdateOne) SetGptMsgID(v int) *GPTDialogUpdateOne {
	_u.mutation.ResetGptMsgID()
	_u.mutation.SetGptMsgID(v)
	return _u
}

// SetNillableGptMsgID sets the "gpt_msg_id" field if the given value is not nil.
func (_u *GPTDialogUpdateOne) SetNillableGptMsgID(v *int) *GPTDialogUpdateOne {
	if v != nil {
		_u.SetGptMsgID(*v)
	}
	return _u
}

// AddGptMsgID adds value to the "gpt_msg_id" field.
func (_u *GPTDialogUpdateOne) AddGptMsgID(v int) *GPTDialogUpdateOne {
	_u.mutation.AddGptMsgID(v)
	return _u
}

// SetGptMsg sets the "gpt_msg" field.
func (_u *GPTDialogUpdateOne) SetGptMsg(v string) *GPTDialogUpdateOne {
	_u.mutation.SetGptMsg(v)
	return _u
}

// SetNillableGptMsg sets the "gpt_msg" field if the given value is not nil.
func (_u *GPTDialogUpdateOne) SetNillableGptMsg(v *string) *GPTDialogUpdateOne {
	if v != nil {
		_u.SetGptMsg(*v)
	}
	return _u
}

// SetThreadTopMsgID sets the "thread_top_msg_id" field.
func (_u *GPTDialogUpdateOne) SetThreadTopMsgID(v int) *GPTDialogUpdateOne {
	_u.mutation.ResetThreadTopMsgID()
	_u.mutation.SetThreadTopMsgID(v)
	return _u
}

// SetNillableThreadTopMsgID sets the "thread_top_msg_id" field if the given value is not nil.
func (_u *GPTDialogUpdateOne) SetNillableThreadTopMsgID(v *int) *GPTDialogUpdateOne {
	if v != nil {
		_u.SetThreadTopMsgID(*v)
	}
	return _u
}

// AddThreadTopMsgID adds value to the "thread_top_msg_id" field.
func (_u *GPTDialogUpdateOne) AddThreadTopMsgID(v int) *GPTDialogUpdateOne {
	_u.mutation.AddThreadTopMsgID(v)
	return _u
}

// ClearThreadTopMsgID clears the value of the "thread_top_msg_id" field.
func (_u *GPTDialogUpdateOne) ClearThreadTopMsgID() *GPTDialogUpdateOne {
	_u.mutation.ClearThreadTopMsgID()
	return _u
}

// Mutation returns the GPTDialogMutation object of the builder.
func (_u *GPTDialogUpdateOne) Mutation() *GPTDialogMutation {
	return _u.mutation
}

// Where appends a list predicates to the GPTDialogUpdate builder.
func (_u *GPTDialogUpdateOne) Where(ps ...predicate.GPTDialog) *GPTDialogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GPTDialogUpdateOne) Select(field string, fields ...string) *GPTDialogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated GPTDialog entity.
func (_u *GPTDialogUpdateOne) Save(ctx context.Context) (*GPTDialog, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GPTDialogUpdateOne) SaveX(ctx context.Context) *GPTDialog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GPTDialogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GPTDialogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *GPTDialogUpdateOne) sqlSave(ctx context.Context) (_node *GPTDialog, err error) {
	_spec := sqlgraph.NewUpdateSpec(gptdialog.Table, gptdialog.Columns, sqlgraph.NewFieldSpec(gptdialog.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GPTDialog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gptdialog.FieldID)
		for _, f := range fields {
			if !gptdialog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gptdialog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PromptMsgID(); ok {
		_spec.SetField(gptdialog.FieldPromptMsgID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPromptMsgID(); ok {
		_spec.AddField(gptdialog.FieldPromptMsgID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PromptMsg(); ok {
		_spec.SetField(gptdialog.FieldPromptMsg, field.TypeString, value)
	}
	if value, ok := _u.mutation.GptMsgID(); ok {
		_spec.SetField(gptdialog.FieldGptMsgID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedGptMsgID(); ok {
		_spec.AddField(gptdialog.FieldGptMsgID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.GptMsg(); ok {
		_spec.SetField(gptdialog.FieldGptMsg, field.TypeString, value)
	}
	if value, ok := _u.mutation.ThreadTopMsgID(); ok {
		_spec.SetField(gptdialog.FieldThreadTopMsgID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedThreadTopMsgID(); ok {
		_spec.AddField(gptdialog.FieldThreadTopMsgID, field.TypeInt, value)
	}
	if _u.mutation.ThreadTopMsgIDCleared() {
		_spec.ClearField(gptdialog.FieldThreadTopMsgID, field.TypeInt)
	}
	_node = &GPTDialog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gptdialog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
