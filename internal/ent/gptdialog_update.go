// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/gptdialog"
	"github.com/go-faster/bot/internal/ent/predicate"
)

// GPTDialogUpdate is the builder for updating GPTDialog entities.
type GPTDialogUpdate struct {
	config
	hooks    []Hook
	mutation *GPTDialogMutation
}

// Where appends a list predicates to the GPTDialogUpdate builder.
func (gdu *GPTDialogUpdate) Where(ps ...predicate.GPTDialog) *GPTDialogUpdate {
	gdu.mutation.Where(ps...)
	return gdu
}

// SetPromptMsgID sets the "prompt_msg_id" field.
func (gdu *GPTDialogUpdate) SetPromptMsgID(i int) *GPTDialogUpdate {
	gdu.mutation.ResetPromptMsgID()
	gdu.mutation.SetPromptMsgID(i)
	return gdu
}

// SetNillablePromptMsgID sets the "prompt_msg_id" field if the given value is not nil.
func (gdu *GPTDialogUpdate) SetNillablePromptMsgID(i *int) *GPTDialogUpdate {
	if i != nil {
		gdu.SetPromptMsgID(*i)
	}
	return gdu
}

// AddPromptMsgID adds i to the "prompt_msg_id" field.
func (gdu *GPTDialogUpdate) AddPromptMsgID(i int) *GPTDialogUpdate {
	gdu.mutation.AddPromptMsgID(i)
	return gdu
}

// SetPromptMsg sets the "prompt_msg" field.
func (gdu *GPTDialogUpdate) SetPromptMsg(s string) *GPTDialogUpdate {
	gdu.mutation.SetPromptMsg(s)
	return gdu
}

// SetNillablePromptMsg sets the "prompt_msg" field if the given value is not nil.
func (gdu *GPTDialogUpdate) SetNillablePromptMsg(s *string) *GPTDialogUpdate {
	if s != nil {
		gdu.SetPromptMsg(*s)
	}
	return gdu
}

// SetGptMsgID sets the "gpt_msg_id" field.
func (gdu *GPTDialogUpdate) SetGptMsgID(i int) *GPTDialogUpdate {
	gdu.mutation.ResetGptMsgID()
	gdu.mutation.SetGptMsgID(i)
	return gdu
}

// SetNillableGptMsgID sets the "gpt_msg_id" field if the given value is not nil.
func (gdu *GPTDialogUpdate) SetNillableGptMsgID(i *int) *GPTDialogUpdate {
	if i != nil {
		gdu.SetGptMsgID(*i)
	}
	return gdu
}

// AddGptMsgID adds i to the "gpt_msg_id" field.
func (gdu *GPTDialogUpdate) AddGptMsgID(i int) *GPTDialogUpdate {
	gdu.mutation.AddGptMsgID(i)
	return gdu
}

// SetGptMsg sets the "gpt_msg" field.
func (gdu *GPTDialogUpdate) SetGptMsg(s string) *GPTDialogUpdate {
	gdu.mutation.SetGptMsg(s)
	return gdu
}

// SetNillableGptMsg sets the "gpt_msg" field if the given value is not nil.
func (gdu *GPTDialogUpdate) SetNillableGptMsg(s *string) *GPTDialogUpdate {
	if s != nil {
		gdu.SetGptMsg(*s)
	}
	return gdu
}

// SetThreadTopMsgID sets the "thread_top_msg_id" field.
func (gdu *GPTDialogUpdate) SetThreadTopMsgID(i int) *GPTDialogUpdate {
	gdu.mutation.ResetThreadTopMsgID()
	gdu.mutation.SetThreadTopMsgID(i)
	return gdu
}

// SetNillableThreadTopMsgID sets the "thread_top_msg_id" field if the given value is not nil.
func (gdu *GPTDialogUpdate) SetNillableThreadTopMsgID(i *int) *GPTDialogUpdate {
	if i != nil {
		gdu.SetThreadTopMsgID(*i)
	}
	return gdu
}

// AddThreadTopMsgID adds i to the "thread_top_msg_id" field.
func (gdu *GPTDialogUpdate) AddThreadTopMsgID(i int) *GPTDialogUpdate {
	gdu.mutation.AddThreadTopMsgID(i)
	return gdu
}

// ClearThreadTopMsgID clears the value of the "thread_top_msg_id" field.
func (gdu *GPTDialogUpdate) ClearThreadTopMsgID() *GPTDialogUpdate {
	gdu.mutation.ClearThreadTopMsgID()
	return gdu
}

// Mutation returns the GPTDialogMutation object of the builder.
func (gdu *GPTDialogUpdate) Mutation() *GPTDialogMutation {
	return gdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gdu *GPTDialogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gdu.sqlSave, gdu.mutation, gdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gdu *GPTDialogUpdate) SaveX(ctx context.Context) int {
	affected, err := gdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gdu *GPTDialogUpdate) Exec(ctx context.Context) error {
	_, err := gdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gdu *GPTDialogUpdate) ExecX(ctx context.Context) {
	if err := gdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gdu *GPTDialogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gptdialog.Table, gptdialog.Columns, sqlgraph.NewFieldSpec(gptdialog.FieldID, field.TypeInt))
	if ps := gdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gdu.mutation.PromptMsgID(); ok {
		_spec.SetField(gptdialog.FieldPromptMsgID, field.TypeInt, value)
	}
	if value, ok := gdu.mutation.AddedPromptMsgID(); ok {
		_spec.AddField(gptdialog.FieldPromptMsgID, field.TypeInt, value)
	}
	if value, ok := gdu.mutation.PromptMsg(); ok {
		_spec.SetField(gptdialog.FieldPromptMsg, field.TypeString, value)
	}
	if value, ok := gdu.mutation.GptMsgID(); ok {
		_spec.SetField(gptdialog.FieldGptMsgID, field.TypeInt, value)
	}
	if value, ok := gdu.mutation.AddedGptMsgID(); ok {
		_spec.AddField(gptdialog.FieldGptMsgID, field.TypeInt, value)
	}
	if value, ok := gdu.mutation.GptMsg(); ok {
		_spec.SetField(gptdialog.FieldGptMsg, field.TypeString, value)
	}
	if value, ok := gdu.mutation.ThreadTopMsgID(); ok {
		_spec.SetField(gptdialog.FieldThreadTopMsgID, field.TypeInt, value)
	}
	if value, ok := gdu.mutation.AddedThreadTopMsgID(); ok {
		_spec.AddField(gptdialog.FieldThreadTopMsgID, field.TypeInt, value)
	}
	if gdu.mutation.ThreadTopMsgIDCleared() {
		_spec.ClearField(gptdialog.FieldThreadTopMsgID, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gptdialog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gdu.mutation.done = true
	return n, nil
}

// GPTDialogUpdateOne is the builder for updating a single GPTDialog entity.
type GPTDialogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GPTDialogMutation
}

// SetPromptMsgID sets the "prompt_msg_id" field.
func (gduo *GPTDialogUpdateOne) SetPromptMsgID(i int) *GPTDialogUpdateOne {
	gduo.mutation.ResetPromptMsgID()
	gduo.mutation.SetPromptMsgID(i)
	return gduo
}

// SetNillablePromptMsgID sets the "prompt_msg_id" field if the given value is not nil.
func (gduo *GPTDialogUpdateOne) SetNillablePromptMsgID(i *int) *GPTDialogUpdateOne {
	if i != nil {
		gduo.SetPromptMsgID(*i)
	}
	return gduo
}

// AddPromptMsgID adds i to the "prompt_msg_id" field.
func (gduo *GPTDialogUpdateOne) AddPromptMsgID(i int) *GPTDialogUpdateOne {
	gduo.mutation.AddPromptMsgID(i)
	return gduo
}

// SetPromptMsg sets the "prompt_msg" field.
func (gduo *GPTDialogUpdateOne) SetPromptMsg(s string) *GPTDialogUpdateOne {
	gduo.mutation.SetPromptMsg(s)
	return gduo
}

// SetNillablePromptMsg sets the "prompt_msg" field if the given value is not nil.
func (gduo *GPTDialogUpdateOne) SetNillablePromptMsg(s *string) *GPTDialogUpdateOne {
	if s != nil {
		gduo.SetPromptMsg(*s)
	}
	return gduo
}

// SetGptMsgID sets the "gpt_msg_id" field.
func (gduo *GPTDialogUpdateOne) SetGptMsgID(i int) *GPTDialogUpdateOne {
	gduo.mutation.ResetGptMsgID()
	gduo.mutation.SetGptMsgID(i)
	return gduo
}

// SetNillableGptMsgID sets the "gpt_msg_id" field if the given value is not nil.
func (gduo *GPTDialogUpdateOne) SetNillableGptMsgID(i *int) *GPTDialogUpdateOne {
	if i != nil {
		gduo.SetGptMsgID(*i)
	}
	return gduo
}

// AddGptMsgID adds i to the "gpt_msg_id" field.
func (gduo *GPTDialogUpdateOne) AddGptMsgID(i int) *GPTDialogUpdateOne {
	gduo.mutation.AddGptMsgID(i)
	return gduo
}

// SetGptMsg sets the "gpt_msg" field.
func (gduo *GPTDialogUpdateOne) SetGptMsg(s string) *GPTDialogUpdateOne {
	gduo.mutation.SetGptMsg(s)
	return gduo
}

// SetNillableGptMsg sets the "gpt_msg" field if the given value is not nil.
func (gduo *GPTDialogUpdateOne) SetNillableGptMsg(s *string) *GPTDialogUpdateOne {
	if s != nil {
		gduo.SetGptMsg(*s)
	}
	return gduo
}

// SetThreadTopMsgID sets the "thread_top_msg_id" field.
func (gduo *GPTDialogUpdateOne) SetThreadTopMsgID(i int) *GPTDialogUpdateOne {
	gduo.mutation.ResetThreadTopMsgID()
	gduo.mutation.SetThreadTopMsgID(i)
	return gduo
}

// SetNillableThreadTopMsgID sets the "thread_top_msg_id" field if the given value is not nil.
func (gduo *GPTDialogUpdateOne) SetNillableThreadTopMsgID(i *int) *GPTDialogUpdateOne {
	if i != nil {
		gduo.SetThreadTopMsgID(*i)
	}
	return gduo
}

// AddThreadTopMsgID adds i to the "thread_top_msg_id" field.
func (gduo *GPTDialogUpdateOne) AddThreadTopMsgID(i int) *GPTDialogUpdateOne {
	gduo.mutation.AddThreadTopMsgID(i)
	return gduo
}

// ClearThreadTopMsgID clears the value of the "thread_top_msg_id" field.
func (gduo *GPTDialogUpdateOne) ClearThreadTopMsgID() *GPTDialogUpdateOne {
	gduo.mutation.ClearThreadTopMsgID()
	return gduo
}

// Mutation returns the GPTDialogMutation object of the builder.
func (gduo *GPTDialogUpdateOne) Mutation() *GPTDialogMutation {
	return gduo.mutation
}

// Where appends a list predicates to the GPTDialogUpdate builder.
func (gduo *GPTDialogUpdateOne) Where(ps ...predicate.GPTDialog) *GPTDialogUpdateOne {
	gduo.mutation.Where(ps...)
	return gduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gduo *GPTDialogUpdateOne) Select(field string, fields ...string) *GPTDialogUpdateOne {
	gduo.fields = append([]string{field}, fields...)
	return gduo
}

// Save executes the query and returns the updated GPTDialog entity.
func (gduo *GPTDialogUpdateOne) Save(ctx context.Context) (*GPTDialog, error) {
	return withHooks(ctx, gduo.sqlSave, gduo.mutation, gduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gduo *GPTDialogUpdateOne) SaveX(ctx context.Context) *GPTDialog {
	node, err := gduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gduo *GPTDialogUpdateOne) Exec(ctx context.Context) error {
	_, err := gduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gduo *GPTDialogUpdateOne) ExecX(ctx context.Context) {
	if err := gduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gduo *GPTDialogUpdateOne) sqlSave(ctx context.Context) (_node *GPTDialog, err error) {
	_spec := sqlgraph.NewUpdateSpec(gptdialog.Table, gptdialog.Columns, sqlgraph.NewFieldSpec(gptdialog.FieldID, field.TypeInt))
	id, ok := gduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GPTDialog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gptdialog.FieldID)
		for _, f := range fields {
			if !gptdialog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gptdialog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gduo.mutation.PromptMsgID(); ok {
		_spec.SetField(gptdialog.FieldPromptMsgID, field.TypeInt, value)
	}
	if value, ok := gduo.mutation.AddedPromptMsgID(); ok {
		_spec.AddField(gptdialog.FieldPromptMsgID, field.TypeInt, value)
	}
	if value, ok := gduo.mutation.PromptMsg(); ok {
		_spec.SetField(gptdialog.FieldPromptMsg, field.TypeString, value)
	}
	if value, ok := gduo.mutation.GptMsgID(); ok {
		_spec.SetField(gptdialog.FieldGptMsgID, field.TypeInt, value)
	}
	if value, ok := gduo.mutation.AddedGptMsgID(); ok {
		_spec.AddField(gptdialog.FieldGptMsgID, field.TypeInt, value)
	}
	if value, ok := gduo.mutation.GptMsg(); ok {
		_spec.SetField(gptdialog.FieldGptMsg, field.TypeString, value)
	}
	if value, ok := gduo.mutation.ThreadTopMsgID(); ok {
		_spec.SetField(gptdialog.FieldThreadTopMsgID, field.TypeInt, value)
	}
	if value, ok := gduo.mutation.AddedThreadTopMsgID(); ok {
		_spec.AddField(gptdialog.FieldThreadTopMsgID, field.TypeInt, value)
	}
	if gduo.mutation.ThreadTopMsgIDCleared() {
		_spec.ClearField(gptdialog.FieldThreadTopMsgID, field.TypeInt)
	}
	_node = &GPTDialog{config: gduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gptdialog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gduo.mutation.done = true
	return _node, nil
}
