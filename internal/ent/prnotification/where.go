// Code generated by ent, DO NOT EDIT.

package prnotification

import (
	"entgo.io/ent/dialect/sql"
	"github.com/go-faster/bot/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldLTE(FieldID, id))
}

// RepoID applies equality check predicate on the "repo_id" field. It's identical to RepoIDEQ.
func RepoID(v int64) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldEQ(FieldRepoID, v))
}

// PullRequestID applies equality check predicate on the "pull_request_id" field. It's identical to PullRequestIDEQ.
func PullRequestID(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldEQ(FieldPullRequestID, v))
}

// MessageID applies equality check predicate on the "message_id" field. It's identical to MessageIDEQ.
func MessageID(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldEQ(FieldMessageID, v))
}

// RepoIDEQ applies the EQ predicate on the "repo_id" field.
func RepoIDEQ(v int64) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldEQ(FieldRepoID, v))
}

// RepoIDNEQ applies the NEQ predicate on the "repo_id" field.
func RepoIDNEQ(v int64) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldNEQ(FieldRepoID, v))
}

// RepoIDIn applies the In predicate on the "repo_id" field.
func RepoIDIn(vs ...int64) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldIn(FieldRepoID, vs...))
}

// RepoIDNotIn applies the NotIn predicate on the "repo_id" field.
func RepoIDNotIn(vs ...int64) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldNotIn(FieldRepoID, vs...))
}

// RepoIDGT applies the GT predicate on the "repo_id" field.
func RepoIDGT(v int64) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldGT(FieldRepoID, v))
}

// RepoIDGTE applies the GTE predicate on the "repo_id" field.
func RepoIDGTE(v int64) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldGTE(FieldRepoID, v))
}

// RepoIDLT applies the LT predicate on the "repo_id" field.
func RepoIDLT(v int64) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldLT(FieldRepoID, v))
}

// RepoIDLTE applies the LTE predicate on the "repo_id" field.
func RepoIDLTE(v int64) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldLTE(FieldRepoID, v))
}

// PullRequestIDEQ applies the EQ predicate on the "pull_request_id" field.
func PullRequestIDEQ(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldEQ(FieldPullRequestID, v))
}

// PullRequestIDNEQ applies the NEQ predicate on the "pull_request_id" field.
func PullRequestIDNEQ(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldNEQ(FieldPullRequestID, v))
}

// PullRequestIDIn applies the In predicate on the "pull_request_id" field.
func PullRequestIDIn(vs ...int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldIn(FieldPullRequestID, vs...))
}

// PullRequestIDNotIn applies the NotIn predicate on the "pull_request_id" field.
func PullRequestIDNotIn(vs ...int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldNotIn(FieldPullRequestID, vs...))
}

// PullRequestIDGT applies the GT predicate on the "pull_request_id" field.
func PullRequestIDGT(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldGT(FieldPullRequestID, v))
}

// PullRequestIDGTE applies the GTE predicate on the "pull_request_id" field.
func PullRequestIDGTE(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldGTE(FieldPullRequestID, v))
}

// PullRequestIDLT applies the LT predicate on the "pull_request_id" field.
func PullRequestIDLT(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldLT(FieldPullRequestID, v))
}

// PullRequestIDLTE applies the LTE predicate on the "pull_request_id" field.
func PullRequestIDLTE(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldLTE(FieldPullRequestID, v))
}

// MessageIDEQ applies the EQ predicate on the "message_id" field.
func MessageIDEQ(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldEQ(FieldMessageID, v))
}

// MessageIDNEQ applies the NEQ predicate on the "message_id" field.
func MessageIDNEQ(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldNEQ(FieldMessageID, v))
}

// MessageIDIn applies the In predicate on the "message_id" field.
func MessageIDIn(vs ...int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldIn(FieldMessageID, vs...))
}

// MessageIDNotIn applies the NotIn predicate on the "message_id" field.
func MessageIDNotIn(vs ...int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldNotIn(FieldMessageID, vs...))
}

// MessageIDGT applies the GT predicate on the "message_id" field.
func MessageIDGT(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldGT(FieldMessageID, v))
}

// MessageIDGTE applies the GTE predicate on the "message_id" field.
func MessageIDGTE(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldGTE(FieldMessageID, v))
}

// MessageIDLT applies the LT predicate on the "message_id" field.
func MessageIDLT(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldLT(FieldMessageID, v))
}

// MessageIDLTE applies the LTE predicate on the "message_id" field.
func MessageIDLTE(v int) predicate.PRNotification {
	return predicate.PRNotification(sql.FieldLTE(FieldMessageID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PRNotification) predicate.PRNotification {
	return predicate.PRNotification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PRNotification) predicate.PRNotification {
	return predicate.PRNotification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PRNotification) predicate.PRNotification {
	return predicate.PRNotification(func(s *sql.Selector) {
		p(s.Not())
	})
}
