// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-faster/bot/internal/ent/prnotification"
)

// PRNotification is the model entity for the PRNotification schema.
type PRNotification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Github repository ID.
	RepoID int64 `json:"repo_id,omitempty"`
	// Pull request number.
	PullRequestID int `json:"pull_request_id,omitempty"`
	// Telegram message ID. Belongs to notify channel.
	MessageID    int `json:"message_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PRNotification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case prnotification.FieldID, prnotification.FieldRepoID, prnotification.FieldPullRequestID, prnotification.FieldMessageID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PRNotification fields.
func (pn *PRNotification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case prnotification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pn.ID = int(value.Int64)
		case prnotification.FieldRepoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repo_id", values[i])
			} else if value.Valid {
				pn.RepoID = value.Int64
			}
		case prnotification.FieldPullRequestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pull_request_id", values[i])
			} else if value.Valid {
				pn.PullRequestID = int(value.Int64)
			}
		case prnotification.FieldMessageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				pn.MessageID = int(value.Int64)
			}
		default:
			pn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PRNotification.
// This includes values selected through modifiers, order, etc.
func (pn *PRNotification) Value(name string) (ent.Value, error) {
	return pn.selectValues.Get(name)
}

// Update returns a builder for updating this PRNotification.
// Note that you need to call PRNotification.Unwrap() before calling this method if this PRNotification
// was returned from a transaction, and the transaction was committed or rolled back.
func (pn *PRNotification) Update() *PRNotificationUpdateOne {
	return NewPRNotificationClient(pn.config).UpdateOne(pn)
}

// Unwrap unwraps the PRNotification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pn *PRNotification) Unwrap() *PRNotification {
	_tx, ok := pn.config.driver.(*txDriver)
	if !ok {
		panic("ent: PRNotification is not a transactional entity")
	}
	pn.config.driver = _tx.drv
	return pn
}

// String implements the fmt.Stringer.
func (pn *PRNotification) String() string {
	var builder strings.Builder
	builder.WriteString("PRNotification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pn.ID))
	builder.WriteString("repo_id=")
	builder.WriteString(fmt.Sprintf("%v", pn.RepoID))
	builder.WriteString(", ")
	builder.WriteString("pull_request_id=")
	builder.WriteString(fmt.Sprintf("%v", pn.PullRequestID))
	builder.WriteString(", ")
	builder.WriteString("message_id=")
	builder.WriteString(fmt.Sprintf("%v", pn.MessageID))
	builder.WriteByte(')')
	return builder.String()
}

// PRNotifications is a parsable slice of PRNotification.
type PRNotifications []*PRNotification
