// Code generated by ent, DO NOT EDIT.

package telegramuserstate

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the telegramuserstate type in the database.
	Label = "telegram_user_state"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQts holds the string denoting the qts field in the database.
	FieldQts = "qts"
	// FieldPts holds the string denoting the pts field in the database.
	FieldPts = "pts"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldSeq holds the string denoting the seq field in the database.
	FieldSeq = "seq"
	// EdgeChannels holds the string denoting the channels edge name in mutations.
	EdgeChannels = "channels"
	// Table holds the table name of the telegramuserstate in the database.
	Table = "telegram_user_states"
	// ChannelsTable is the table that holds the channels relation/edge.
	ChannelsTable = "telegram_channel_states"
	// ChannelsInverseTable is the table name for the TelegramChannelState entity.
	// It exists in this package in order to avoid circular dependency with the "telegramchannelstate" package.
	ChannelsInverseTable = "telegram_channel_states"
	// ChannelsColumn is the table column denoting the channels relation/edge.
	ChannelsColumn = "user_id"
)

// Columns holds all SQL columns for telegramuserstate fields.
var Columns = []string{
	FieldID,
	FieldQts,
	FieldPts,
	FieldDate,
	FieldSeq,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultQts holds the default value on creation for the "qts" field.
	DefaultQts int
	// DefaultPts holds the default value on creation for the "pts" field.
	DefaultPts int
	// DefaultDate holds the default value on creation for the "date" field.
	DefaultDate int
	// DefaultSeq holds the default value on creation for the "seq" field.
	DefaultSeq int
)

// OrderOption defines the ordering options for the TelegramUserState queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQts orders the results by the qts field.
func ByQts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQts, opts...).ToFunc()
}

// ByPts orders the results by the pts field.
func ByPts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPts, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// BySeq orders the results by the seq field.
func BySeq(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeq, opts...).ToFunc()
}

// ByChannelsCount orders the results by channels count.
func ByChannelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChannelsStep(), opts...)
	}
}

// ByChannels orders the results by channels terms.
func ByChannels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChannelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChannelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChannelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChannelsTable, ChannelsColumn),
	)
}
