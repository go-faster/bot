// Code generated by ent, DO NOT EDIT.

package telegramuserstate

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/go-faster/bot/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldLTE(FieldID, id))
}

// Qts applies equality check predicate on the "qts" field. It's identical to QtsEQ.
func Qts(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldEQ(FieldQts, v))
}

// Pts applies equality check predicate on the "pts" field. It's identical to PtsEQ.
func Pts(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldEQ(FieldPts, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldEQ(FieldDate, v))
}

// Seq applies equality check predicate on the "seq" field. It's identical to SeqEQ.
func Seq(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldEQ(FieldSeq, v))
}

// QtsEQ applies the EQ predicate on the "qts" field.
func QtsEQ(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldEQ(FieldQts, v))
}

// QtsNEQ applies the NEQ predicate on the "qts" field.
func QtsNEQ(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldNEQ(FieldQts, v))
}

// QtsIn applies the In predicate on the "qts" field.
func QtsIn(vs ...int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldIn(FieldQts, vs...))
}

// QtsNotIn applies the NotIn predicate on the "qts" field.
func QtsNotIn(vs ...int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldNotIn(FieldQts, vs...))
}

// QtsGT applies the GT predicate on the "qts" field.
func QtsGT(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldGT(FieldQts, v))
}

// QtsGTE applies the GTE predicate on the "qts" field.
func QtsGTE(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldGTE(FieldQts, v))
}

// QtsLT applies the LT predicate on the "qts" field.
func QtsLT(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldLT(FieldQts, v))
}

// QtsLTE applies the LTE predicate on the "qts" field.
func QtsLTE(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldLTE(FieldQts, v))
}

// PtsEQ applies the EQ predicate on the "pts" field.
func PtsEQ(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldEQ(FieldPts, v))
}

// PtsNEQ applies the NEQ predicate on the "pts" field.
func PtsNEQ(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldNEQ(FieldPts, v))
}

// PtsIn applies the In predicate on the "pts" field.
func PtsIn(vs ...int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldIn(FieldPts, vs...))
}

// PtsNotIn applies the NotIn predicate on the "pts" field.
func PtsNotIn(vs ...int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldNotIn(FieldPts, vs...))
}

// PtsGT applies the GT predicate on the "pts" field.
func PtsGT(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldGT(FieldPts, v))
}

// PtsGTE applies the GTE predicate on the "pts" field.
func PtsGTE(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldGTE(FieldPts, v))
}

// PtsLT applies the LT predicate on the "pts" field.
func PtsLT(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldLT(FieldPts, v))
}

// PtsLTE applies the LTE predicate on the "pts" field.
func PtsLTE(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldLTE(FieldPts, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldLTE(FieldDate, v))
}

// SeqEQ applies the EQ predicate on the "seq" field.
func SeqEQ(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldEQ(FieldSeq, v))
}

// SeqNEQ applies the NEQ predicate on the "seq" field.
func SeqNEQ(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldNEQ(FieldSeq, v))
}

// SeqIn applies the In predicate on the "seq" field.
func SeqIn(vs ...int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldIn(FieldSeq, vs...))
}

// SeqNotIn applies the NotIn predicate on the "seq" field.
func SeqNotIn(vs ...int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldNotIn(FieldSeq, vs...))
}

// SeqGT applies the GT predicate on the "seq" field.
func SeqGT(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldGT(FieldSeq, v))
}

// SeqGTE applies the GTE predicate on the "seq" field.
func SeqGTE(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldGTE(FieldSeq, v))
}

// SeqLT applies the LT predicate on the "seq" field.
func SeqLT(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldLT(FieldSeq, v))
}

// SeqLTE applies the LTE predicate on the "seq" field.
func SeqLTE(v int) predicate.TelegramUserState {
	return predicate.TelegramUserState(sql.FieldLTE(FieldSeq, v))
}

// HasChannels applies the HasEdge predicate on the "channels" edge.
func HasChannels() predicate.TelegramUserState {
	return predicate.TelegramUserState(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChannelsTable, ChannelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelsWith applies the HasEdge predicate on the "channels" edge with a given conditions (other predicates).
func HasChannelsWith(preds ...predicate.TelegramChannelState) predicate.TelegramUserState {
	return predicate.TelegramUserState(func(s *sql.Selector) {
		step := newChannelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TelegramUserState) predicate.TelegramUserState {
	return predicate.TelegramUserState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TelegramUserState) predicate.TelegramUserState {
	return predicate.TelegramUserState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TelegramUserState) predicate.TelegramUserState {
	return predicate.TelegramUserState(func(s *sql.Selector) {
		p(s.Not())
	})
}
