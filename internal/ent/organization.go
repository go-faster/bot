// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-faster/bot/internal/ent/organization"
)

// Organization is the model entity for the Organization schema.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	// GitHub organization ID.
	ID int64 `json:"id,omitempty"`
	// GitHub organization name.
	Name string `json:"name,omitempty"`
	// GitHub organization URL.
	HTMLURL string `json:"html_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationQuery when eager-loading is set.
	Edges        OrganizationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationEdges holds the relations/edges for other nodes in the graph.
type OrganizationEdges struct {
	// GitHub repositories.
	Repositories []*Repository `json:"repositories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes       [1]bool
	namedRepositories map[string][]*Repository
}

// RepositoriesOrErr returns the Repositories value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) RepositoriesOrErr() ([]*Repository, error) {
	if e.loadedTypes[0] {
		return e.Repositories, nil
	}
	return nil, &NotLoadedError{edge: "repositories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			values[i] = new(sql.NullInt64)
		case organization.FieldName, organization.FieldHTMLURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (_m *Organization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case organization.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case organization.FieldHTMLURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_url", values[i])
			} else if value.Valid {
				_m.HTMLURL = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Organization.
// This includes values selected through modifiers, order, etc.
func (_m *Organization) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryRepositories queries the "repositories" edge of the Organization entity.
func (_m *Organization) QueryRepositories() *RepositoryQuery {
	return NewOrganizationClient(_m.config).QueryRepositories(_m)
}

// Update returns a builder for updating this Organization.
// Note that you need to call Organization.Unwrap() before calling this method if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Organization) Update() *OrganizationUpdateOne {
	return NewOrganizationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Organization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Organization) Unwrap() *Organization {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Organization is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("html_url=")
	builder.WriteString(_m.HTMLURL)
	builder.WriteByte(')')
	return builder.String()
}

// NamedRepositories returns the Repositories named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Organization) NamedRepositories(name string) ([]*Repository, error) {
	if _m.Edges.namedRepositories == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedRepositories[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Organization) appendNamedRepositories(name string, edges ...*Repository) {
	if _m.Edges.namedRepositories == nil {
		_m.Edges.namedRepositories = make(map[string][]*Repository)
	}
	if len(edges) == 0 {
		_m.Edges.namedRepositories[name] = []*Repository{}
	} else {
		_m.Edges.namedRepositories[name] = append(_m.Edges.namedRepositories[name], edges...)
	}
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization
