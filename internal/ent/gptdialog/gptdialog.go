// Code generated by ent, DO NOT EDIT.

package gptdialog

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the gptdialog type in the database.
	Label = "gpt_dialog"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPeerID holds the string denoting the peer_id field in the database.
	FieldPeerID = "peer_id"
	// FieldPromptMsgID holds the string denoting the prompt_msg_id field in the database.
	FieldPromptMsgID = "prompt_msg_id"
	// FieldPromptMsg holds the string denoting the prompt_msg field in the database.
	FieldPromptMsg = "prompt_msg"
	// FieldGptMsgID holds the string denoting the gpt_msg_id field in the database.
	FieldGptMsgID = "gpt_msg_id"
	// FieldGptMsg holds the string denoting the gpt_msg field in the database.
	FieldGptMsg = "gpt_msg"
	// FieldThreadTopMsgID holds the string denoting the thread_top_msg_id field in the database.
	FieldThreadTopMsgID = "thread_top_msg_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the gptdialog in the database.
	Table = "gpt_dialogs"
)

// Columns holds all SQL columns for gptdialog fields.
var Columns = []string{
	FieldID,
	FieldPeerID,
	FieldPromptMsgID,
	FieldPromptMsg,
	FieldGptMsgID,
	FieldGptMsg,
	FieldThreadTopMsgID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Order defines the ordering method for the GPTDialog queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPeerID orders the results by the peer_id field.
func ByPeerID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPeerID, opts...).ToFunc()
}

// ByPromptMsgID orders the results by the prompt_msg_id field.
func ByPromptMsgID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPromptMsgID, opts...).ToFunc()
}

// ByPromptMsg orders the results by the prompt_msg field.
func ByPromptMsg(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPromptMsg, opts...).ToFunc()
}

// ByGptMsgID orders the results by the gpt_msg_id field.
func ByGptMsgID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldGptMsgID, opts...).ToFunc()
}

// ByGptMsg orders the results by the gpt_msg field.
func ByGptMsg(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldGptMsg, opts...).ToFunc()
}

// ByThreadTopMsgID orders the results by the thread_top_msg_id field.
func ByThreadTopMsgID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldThreadTopMsgID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
