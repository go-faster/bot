// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-faster/bot/internal/ent/telegramchannelstate"
	"github.com/go-faster/bot/internal/ent/telegramuserstate"
)

// TelegramChannelState is the model entity for the TelegramChannelState schema.
type TelegramChannelState struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Channel id
	ChannelID int64 `json:"channel_id,omitempty"`
	// User id
	UserID int64 `json:"user_id,omitempty"`
	// Pts holds the value of the "pts" field.
	Pts int `json:"pts,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TelegramChannelStateQuery when eager-loading is set.
	Edges        TelegramChannelStateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TelegramChannelStateEdges holds the relations/edges for other nodes in the graph.
type TelegramChannelStateEdges struct {
	// User holds the value of the user edge.
	User *TelegramUserState `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TelegramChannelStateEdges) UserOrErr() (*TelegramUserState, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: telegramuserstate.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TelegramChannelState) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case telegramchannelstate.FieldID, telegramchannelstate.FieldChannelID, telegramchannelstate.FieldUserID, telegramchannelstate.FieldPts:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TelegramChannelState fields.
func (tcs *TelegramChannelState) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telegramchannelstate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tcs.ID = int(value.Int64)
		case telegramchannelstate.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				tcs.ChannelID = value.Int64
			}
		case telegramchannelstate.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tcs.UserID = value.Int64
			}
		case telegramchannelstate.FieldPts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pts", values[i])
			} else if value.Valid {
				tcs.Pts = int(value.Int64)
			}
		default:
			tcs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TelegramChannelState.
// This includes values selected through modifiers, order, etc.
func (tcs *TelegramChannelState) Value(name string) (ent.Value, error) {
	return tcs.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the TelegramChannelState entity.
func (tcs *TelegramChannelState) QueryUser() *TelegramUserStateQuery {
	return NewTelegramChannelStateClient(tcs.config).QueryUser(tcs)
}

// Update returns a builder for updating this TelegramChannelState.
// Note that you need to call TelegramChannelState.Unwrap() before calling this method if this TelegramChannelState
// was returned from a transaction, and the transaction was committed or rolled back.
func (tcs *TelegramChannelState) Update() *TelegramChannelStateUpdateOne {
	return NewTelegramChannelStateClient(tcs.config).UpdateOne(tcs)
}

// Unwrap unwraps the TelegramChannelState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tcs *TelegramChannelState) Unwrap() *TelegramChannelState {
	_tx, ok := tcs.config.driver.(*txDriver)
	if !ok {
		panic("ent: TelegramChannelState is not a transactional entity")
	}
	tcs.config.driver = _tx.drv
	return tcs
}

// String implements the fmt.Stringer.
func (tcs *TelegramChannelState) String() string {
	var builder strings.Builder
	builder.WriteString("TelegramChannelState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tcs.ID))
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", tcs.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", tcs.UserID))
	builder.WriteString(", ")
	builder.WriteString("pts=")
	builder.WriteString(fmt.Sprintf("%v", tcs.Pts))
	builder.WriteByte(')')
	return builder.String()
}

// TelegramChannelStates is a parsable slice of TelegramChannelState.
type TelegramChannelStates []*TelegramChannelState
