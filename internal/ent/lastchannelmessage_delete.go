// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/lastchannelmessage"
	"github.com/go-faster/bot/internal/ent/predicate"
)

// LastChannelMessageDelete is the builder for deleting a LastChannelMessage entity.
type LastChannelMessageDelete struct {
	config
	hooks    []Hook
	mutation *LastChannelMessageMutation
}

// Where appends a list predicates to the LastChannelMessageDelete builder.
func (lcmd *LastChannelMessageDelete) Where(ps ...predicate.LastChannelMessage) *LastChannelMessageDelete {
	lcmd.mutation.Where(ps...)
	return lcmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lcmd *LastChannelMessageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, LastChannelMessageMutation](ctx, lcmd.sqlExec, lcmd.mutation, lcmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lcmd *LastChannelMessageDelete) ExecX(ctx context.Context) int {
	n, err := lcmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lcmd *LastChannelMessageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lastchannelmessage.Table, sqlgraph.NewFieldSpec(lastchannelmessage.FieldID, field.TypeInt64))
	if ps := lcmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lcmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lcmd.mutation.done = true
	return affected, err
}

// LastChannelMessageDeleteOne is the builder for deleting a single LastChannelMessage entity.
type LastChannelMessageDeleteOne struct {
	lcmd *LastChannelMessageDelete
}

// Where appends a list predicates to the LastChannelMessageDelete builder.
func (lcmdo *LastChannelMessageDeleteOne) Where(ps ...predicate.LastChannelMessage) *LastChannelMessageDeleteOne {
	lcmdo.lcmd.mutation.Where(ps...)
	return lcmdo
}

// Exec executes the deletion query.
func (lcmdo *LastChannelMessageDeleteOne) Exec(ctx context.Context) error {
	n, err := lcmdo.lcmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lastchannelmessage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lcmdo *LastChannelMessageDeleteOne) ExecX(ctx context.Context) {
	if err := lcmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
