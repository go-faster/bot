// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/go-faster/bot/internal/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/go-faster/bot/internal/ent/check"
	"github.com/go-faster/bot/internal/ent/gitcommit"
	"github.com/go-faster/bot/internal/ent/gptdialog"
	"github.com/go-faster/bot/internal/ent/lastchannelmessage"
	"github.com/go-faster/bot/internal/ent/organization"
	"github.com/go-faster/bot/internal/ent/prnotification"
	"github.com/go-faster/bot/internal/ent/repository"
	"github.com/go-faster/bot/internal/ent/telegramchannelstate"
	"github.com/go-faster/bot/internal/ent/telegramsession"
	"github.com/go-faster/bot/internal/ent/telegramuserstate"
	"github.com/go-faster/bot/internal/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Check is the client for interacting with the Check builders.
	Check *CheckClient
	// GPTDialog is the client for interacting with the GPTDialog builders.
	GPTDialog *GPTDialogClient
	// GitCommit is the client for interacting with the GitCommit builders.
	GitCommit *GitCommitClient
	// LastChannelMessage is the client for interacting with the LastChannelMessage builders.
	LastChannelMessage *LastChannelMessageClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// PRNotification is the client for interacting with the PRNotification builders.
	PRNotification *PRNotificationClient
	// Repository is the client for interacting with the Repository builders.
	Repository *RepositoryClient
	// TelegramChannelState is the client for interacting with the TelegramChannelState builders.
	TelegramChannelState *TelegramChannelStateClient
	// TelegramSession is the client for interacting with the TelegramSession builders.
	TelegramSession *TelegramSessionClient
	// TelegramUserState is the client for interacting with the TelegramUserState builders.
	TelegramUserState *TelegramUserStateClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Check = NewCheckClient(c.config)
	c.GPTDialog = NewGPTDialogClient(c.config)
	c.GitCommit = NewGitCommitClient(c.config)
	c.LastChannelMessage = NewLastChannelMessageClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.PRNotification = NewPRNotificationClient(c.config)
	c.Repository = NewRepositoryClient(c.config)
	c.TelegramChannelState = NewTelegramChannelStateClient(c.config)
	c.TelegramSession = NewTelegramSessionClient(c.config)
	c.TelegramUserState = NewTelegramUserStateClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Check:                NewCheckClient(cfg),
		GPTDialog:            NewGPTDialogClient(cfg),
		GitCommit:            NewGitCommitClient(cfg),
		LastChannelMessage:   NewLastChannelMessageClient(cfg),
		Organization:         NewOrganizationClient(cfg),
		PRNotification:       NewPRNotificationClient(cfg),
		Repository:           NewRepositoryClient(cfg),
		TelegramChannelState: NewTelegramChannelStateClient(cfg),
		TelegramSession:      NewTelegramSessionClient(cfg),
		TelegramUserState:    NewTelegramUserStateClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Check:                NewCheckClient(cfg),
		GPTDialog:            NewGPTDialogClient(cfg),
		GitCommit:            NewGitCommitClient(cfg),
		LastChannelMessage:   NewLastChannelMessageClient(cfg),
		Organization:         NewOrganizationClient(cfg),
		PRNotification:       NewPRNotificationClient(cfg),
		Repository:           NewRepositoryClient(cfg),
		TelegramChannelState: NewTelegramChannelStateClient(cfg),
		TelegramSession:      NewTelegramSessionClient(cfg),
		TelegramUserState:    NewTelegramUserStateClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Check.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Check, c.GPTDialog, c.GitCommit, c.LastChannelMessage, c.Organization,
		c.PRNotification, c.Repository, c.TelegramChannelState, c.TelegramSession,
		c.TelegramUserState, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Check, c.GPTDialog, c.GitCommit, c.LastChannelMessage, c.Organization,
		c.PRNotification, c.Repository, c.TelegramChannelState, c.TelegramSession,
		c.TelegramUserState, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CheckMutation:
		return c.Check.mutate(ctx, m)
	case *GPTDialogMutation:
		return c.GPTDialog.mutate(ctx, m)
	case *GitCommitMutation:
		return c.GitCommit.mutate(ctx, m)
	case *LastChannelMessageMutation:
		return c.LastChannelMessage.mutate(ctx, m)
	case *OrganizationMutation:
		return c.Organization.mutate(ctx, m)
	case *PRNotificationMutation:
		return c.PRNotification.mutate(ctx, m)
	case *RepositoryMutation:
		return c.Repository.mutate(ctx, m)
	case *TelegramChannelStateMutation:
		return c.TelegramChannelState.mutate(ctx, m)
	case *TelegramSessionMutation:
		return c.TelegramSession.mutate(ctx, m)
	case *TelegramUserStateMutation:
		return c.TelegramUserState.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CheckClient is a client for the Check schema.
type CheckClient struct {
	config
}

// NewCheckClient returns a client for the Check from the given config.
func NewCheckClient(c config) *CheckClient {
	return &CheckClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `check.Hooks(f(g(h())))`.
func (c *CheckClient) Use(hooks ...Hook) {
	c.hooks.Check = append(c.hooks.Check, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `check.Intercept(f(g(h())))`.
func (c *CheckClient) Intercept(interceptors ...Interceptor) {
	c.inters.Check = append(c.inters.Check, interceptors...)
}

// Create returns a builder for creating a Check entity.
func (c *CheckClient) Create() *CheckCreate {
	mutation := newCheckMutation(c.config, OpCreate)
	return &CheckCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Check entities.
func (c *CheckClient) CreateBulk(builders ...*CheckCreate) *CheckCreateBulk {
	return &CheckCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CheckClient) MapCreateBulk(slice any, setFunc func(*CheckCreate, int)) *CheckCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CheckCreateBulk{err: fmt.Errorf("calling to CheckClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CheckCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CheckCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Check.
func (c *CheckClient) Update() *CheckUpdate {
	mutation := newCheckMutation(c.config, OpUpdate)
	return &CheckUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckClient) UpdateOne(ch *Check) *CheckUpdateOne {
	mutation := newCheckMutation(c.config, OpUpdateOne, withCheck(ch))
	return &CheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckClient) UpdateOneID(id int64) *CheckUpdateOne {
	mutation := newCheckMutation(c.config, OpUpdateOne, withCheckID(id))
	return &CheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Check.
func (c *CheckClient) Delete() *CheckDelete {
	mutation := newCheckMutation(c.config, OpDelete)
	return &CheckDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CheckClient) DeleteOne(ch *Check) *CheckDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CheckClient) DeleteOneID(id int64) *CheckDeleteOne {
	builder := c.Delete().Where(check.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckDeleteOne{builder}
}

// Query returns a query builder for Check.
func (c *CheckClient) Query() *CheckQuery {
	return &CheckQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCheck},
		inters: c.Interceptors(),
	}
}

// Get returns a Check entity by its id.
func (c *CheckClient) Get(ctx context.Context, id int64) (*Check, error) {
	return c.Query().Where(check.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckClient) GetX(ctx context.Context, id int64) *Check {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CheckClient) Hooks() []Hook {
	return c.hooks.Check
}

// Interceptors returns the client interceptors.
func (c *CheckClient) Interceptors() []Interceptor {
	return c.inters.Check
}

func (c *CheckClient) mutate(ctx context.Context, m *CheckMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CheckCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CheckUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CheckDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Check mutation op: %q", m.Op())
	}
}

// GPTDialogClient is a client for the GPTDialog schema.
type GPTDialogClient struct {
	config
}

// NewGPTDialogClient returns a client for the GPTDialog from the given config.
func NewGPTDialogClient(c config) *GPTDialogClient {
	return &GPTDialogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gptdialog.Hooks(f(g(h())))`.
func (c *GPTDialogClient) Use(hooks ...Hook) {
	c.hooks.GPTDialog = append(c.hooks.GPTDialog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gptdialog.Intercept(f(g(h())))`.
func (c *GPTDialogClient) Intercept(interceptors ...Interceptor) {
	c.inters.GPTDialog = append(c.inters.GPTDialog, interceptors...)
}

// Create returns a builder for creating a GPTDialog entity.
func (c *GPTDialogClient) Create() *GPTDialogCreate {
	mutation := newGPTDialogMutation(c.config, OpCreate)
	return &GPTDialogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GPTDialog entities.
func (c *GPTDialogClient) CreateBulk(builders ...*GPTDialogCreate) *GPTDialogCreateBulk {
	return &GPTDialogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GPTDialogClient) MapCreateBulk(slice any, setFunc func(*GPTDialogCreate, int)) *GPTDialogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GPTDialogCreateBulk{err: fmt.Errorf("calling to GPTDialogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GPTDialogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GPTDialogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GPTDialog.
func (c *GPTDialogClient) Update() *GPTDialogUpdate {
	mutation := newGPTDialogMutation(c.config, OpUpdate)
	return &GPTDialogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GPTDialogClient) UpdateOne(gd *GPTDialog) *GPTDialogUpdateOne {
	mutation := newGPTDialogMutation(c.config, OpUpdateOne, withGPTDialog(gd))
	return &GPTDialogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GPTDialogClient) UpdateOneID(id int) *GPTDialogUpdateOne {
	mutation := newGPTDialogMutation(c.config, OpUpdateOne, withGPTDialogID(id))
	return &GPTDialogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GPTDialog.
func (c *GPTDialogClient) Delete() *GPTDialogDelete {
	mutation := newGPTDialogMutation(c.config, OpDelete)
	return &GPTDialogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GPTDialogClient) DeleteOne(gd *GPTDialog) *GPTDialogDeleteOne {
	return c.DeleteOneID(gd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GPTDialogClient) DeleteOneID(id int) *GPTDialogDeleteOne {
	builder := c.Delete().Where(gptdialog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GPTDialogDeleteOne{builder}
}

// Query returns a query builder for GPTDialog.
func (c *GPTDialogClient) Query() *GPTDialogQuery {
	return &GPTDialogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGPTDialog},
		inters: c.Interceptors(),
	}
}

// Get returns a GPTDialog entity by its id.
func (c *GPTDialogClient) Get(ctx context.Context, id int) (*GPTDialog, error) {
	return c.Query().Where(gptdialog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GPTDialogClient) GetX(ctx context.Context, id int) *GPTDialog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GPTDialogClient) Hooks() []Hook {
	return c.hooks.GPTDialog
}

// Interceptors returns the client interceptors.
func (c *GPTDialogClient) Interceptors() []Interceptor {
	return c.inters.GPTDialog
}

func (c *GPTDialogClient) mutate(ctx context.Context, m *GPTDialogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GPTDialogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GPTDialogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GPTDialogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GPTDialogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GPTDialog mutation op: %q", m.Op())
	}
}

// GitCommitClient is a client for the GitCommit schema.
type GitCommitClient struct {
	config
}

// NewGitCommitClient returns a client for the GitCommit from the given config.
func NewGitCommitClient(c config) *GitCommitClient {
	return &GitCommitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gitcommit.Hooks(f(g(h())))`.
func (c *GitCommitClient) Use(hooks ...Hook) {
	c.hooks.GitCommit = append(c.hooks.GitCommit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gitcommit.Intercept(f(g(h())))`.
func (c *GitCommitClient) Intercept(interceptors ...Interceptor) {
	c.inters.GitCommit = append(c.inters.GitCommit, interceptors...)
}

// Create returns a builder for creating a GitCommit entity.
func (c *GitCommitClient) Create() *GitCommitCreate {
	mutation := newGitCommitMutation(c.config, OpCreate)
	return &GitCommitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GitCommit entities.
func (c *GitCommitClient) CreateBulk(builders ...*GitCommitCreate) *GitCommitCreateBulk {
	return &GitCommitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GitCommitClient) MapCreateBulk(slice any, setFunc func(*GitCommitCreate, int)) *GitCommitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GitCommitCreateBulk{err: fmt.Errorf("calling to GitCommitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GitCommitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GitCommitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GitCommit.
func (c *GitCommitClient) Update() *GitCommitUpdate {
	mutation := newGitCommitMutation(c.config, OpUpdate)
	return &GitCommitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GitCommitClient) UpdateOne(gc *GitCommit) *GitCommitUpdateOne {
	mutation := newGitCommitMutation(c.config, OpUpdateOne, withGitCommit(gc))
	return &GitCommitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GitCommitClient) UpdateOneID(id string) *GitCommitUpdateOne {
	mutation := newGitCommitMutation(c.config, OpUpdateOne, withGitCommitID(id))
	return &GitCommitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GitCommit.
func (c *GitCommitClient) Delete() *GitCommitDelete {
	mutation := newGitCommitMutation(c.config, OpDelete)
	return &GitCommitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GitCommitClient) DeleteOne(gc *GitCommit) *GitCommitDeleteOne {
	return c.DeleteOneID(gc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GitCommitClient) DeleteOneID(id string) *GitCommitDeleteOne {
	builder := c.Delete().Where(gitcommit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GitCommitDeleteOne{builder}
}

// Query returns a query builder for GitCommit.
func (c *GitCommitClient) Query() *GitCommitQuery {
	return &GitCommitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGitCommit},
		inters: c.Interceptors(),
	}
}

// Get returns a GitCommit entity by its id.
func (c *GitCommitClient) Get(ctx context.Context, id string) (*GitCommit, error) {
	return c.Query().Where(gitcommit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GitCommitClient) GetX(ctx context.Context, id string) *GitCommit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepository queries the repository edge of a GitCommit.
func (c *GitCommitClient) QueryRepository(gc *GitCommit) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gitcommit.Table, gitcommit.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gitcommit.RepositoryTable, gitcommit.RepositoryColumn),
		)
		fromV = sqlgraph.Neighbors(gc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GitCommitClient) Hooks() []Hook {
	return c.hooks.GitCommit
}

// Interceptors returns the client interceptors.
func (c *GitCommitClient) Interceptors() []Interceptor {
	return c.inters.GitCommit
}

func (c *GitCommitClient) mutate(ctx context.Context, m *GitCommitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GitCommitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GitCommitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GitCommitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GitCommitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GitCommit mutation op: %q", m.Op())
	}
}

// LastChannelMessageClient is a client for the LastChannelMessage schema.
type LastChannelMessageClient struct {
	config
}

// NewLastChannelMessageClient returns a client for the LastChannelMessage from the given config.
func NewLastChannelMessageClient(c config) *LastChannelMessageClient {
	return &LastChannelMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lastchannelmessage.Hooks(f(g(h())))`.
func (c *LastChannelMessageClient) Use(hooks ...Hook) {
	c.hooks.LastChannelMessage = append(c.hooks.LastChannelMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lastchannelmessage.Intercept(f(g(h())))`.
func (c *LastChannelMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.LastChannelMessage = append(c.inters.LastChannelMessage, interceptors...)
}

// Create returns a builder for creating a LastChannelMessage entity.
func (c *LastChannelMessageClient) Create() *LastChannelMessageCreate {
	mutation := newLastChannelMessageMutation(c.config, OpCreate)
	return &LastChannelMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LastChannelMessage entities.
func (c *LastChannelMessageClient) CreateBulk(builders ...*LastChannelMessageCreate) *LastChannelMessageCreateBulk {
	return &LastChannelMessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LastChannelMessageClient) MapCreateBulk(slice any, setFunc func(*LastChannelMessageCreate, int)) *LastChannelMessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LastChannelMessageCreateBulk{err: fmt.Errorf("calling to LastChannelMessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LastChannelMessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LastChannelMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LastChannelMessage.
func (c *LastChannelMessageClient) Update() *LastChannelMessageUpdate {
	mutation := newLastChannelMessageMutation(c.config, OpUpdate)
	return &LastChannelMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LastChannelMessageClient) UpdateOne(lcm *LastChannelMessage) *LastChannelMessageUpdateOne {
	mutation := newLastChannelMessageMutation(c.config, OpUpdateOne, withLastChannelMessage(lcm))
	return &LastChannelMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LastChannelMessageClient) UpdateOneID(id int64) *LastChannelMessageUpdateOne {
	mutation := newLastChannelMessageMutation(c.config, OpUpdateOne, withLastChannelMessageID(id))
	return &LastChannelMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LastChannelMessage.
func (c *LastChannelMessageClient) Delete() *LastChannelMessageDelete {
	mutation := newLastChannelMessageMutation(c.config, OpDelete)
	return &LastChannelMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LastChannelMessageClient) DeleteOne(lcm *LastChannelMessage) *LastChannelMessageDeleteOne {
	return c.DeleteOneID(lcm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LastChannelMessageClient) DeleteOneID(id int64) *LastChannelMessageDeleteOne {
	builder := c.Delete().Where(lastchannelmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LastChannelMessageDeleteOne{builder}
}

// Query returns a query builder for LastChannelMessage.
func (c *LastChannelMessageClient) Query() *LastChannelMessageQuery {
	return &LastChannelMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLastChannelMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a LastChannelMessage entity by its id.
func (c *LastChannelMessageClient) Get(ctx context.Context, id int64) (*LastChannelMessage, error) {
	return c.Query().Where(lastchannelmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LastChannelMessageClient) GetX(ctx context.Context, id int64) *LastChannelMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LastChannelMessageClient) Hooks() []Hook {
	return c.hooks.LastChannelMessage
}

// Interceptors returns the client interceptors.
func (c *LastChannelMessageClient) Interceptors() []Interceptor {
	return c.inters.LastChannelMessage
}

func (c *LastChannelMessageClient) mutate(ctx context.Context, m *LastChannelMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LastChannelMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LastChannelMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LastChannelMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LastChannelMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LastChannelMessage mutation op: %q", m.Op())
	}
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organization.Intercept(f(g(h())))`.
func (c *OrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Organization = append(c.inters.Organization, interceptors...)
}

// Create returns a builder for creating a Organization entity.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationClient) MapCreateBulk(slice any, setFunc func(*OrganizationCreate, int)) *OrganizationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationCreateBulk{err: fmt.Errorf("calling to OrganizationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id int64) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationClient) DeleteOneID(id int64) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id int64) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id int64) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepositories queries the repositories edge of a Organization.
func (c *OrganizationClient) QueryRepositories(o *Organization) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.RepositoriesTable, organization.RepositoriesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	return c.hooks.Organization
}

// Interceptors returns the client interceptors.
func (c *OrganizationClient) Interceptors() []Interceptor {
	return c.inters.Organization
}

func (c *OrganizationClient) mutate(ctx context.Context, m *OrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Organization mutation op: %q", m.Op())
	}
}

// PRNotificationClient is a client for the PRNotification schema.
type PRNotificationClient struct {
	config
}

// NewPRNotificationClient returns a client for the PRNotification from the given config.
func NewPRNotificationClient(c config) *PRNotificationClient {
	return &PRNotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prnotification.Hooks(f(g(h())))`.
func (c *PRNotificationClient) Use(hooks ...Hook) {
	c.hooks.PRNotification = append(c.hooks.PRNotification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prnotification.Intercept(f(g(h())))`.
func (c *PRNotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.PRNotification = append(c.inters.PRNotification, interceptors...)
}

// Create returns a builder for creating a PRNotification entity.
func (c *PRNotificationClient) Create() *PRNotificationCreate {
	mutation := newPRNotificationMutation(c.config, OpCreate)
	return &PRNotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PRNotification entities.
func (c *PRNotificationClient) CreateBulk(builders ...*PRNotificationCreate) *PRNotificationCreateBulk {
	return &PRNotificationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PRNotificationClient) MapCreateBulk(slice any, setFunc func(*PRNotificationCreate, int)) *PRNotificationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PRNotificationCreateBulk{err: fmt.Errorf("calling to PRNotificationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PRNotificationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PRNotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PRNotification.
func (c *PRNotificationClient) Update() *PRNotificationUpdate {
	mutation := newPRNotificationMutation(c.config, OpUpdate)
	return &PRNotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PRNotificationClient) UpdateOne(pn *PRNotification) *PRNotificationUpdateOne {
	mutation := newPRNotificationMutation(c.config, OpUpdateOne, withPRNotification(pn))
	return &PRNotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PRNotificationClient) UpdateOneID(id int) *PRNotificationUpdateOne {
	mutation := newPRNotificationMutation(c.config, OpUpdateOne, withPRNotificationID(id))
	return &PRNotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PRNotification.
func (c *PRNotificationClient) Delete() *PRNotificationDelete {
	mutation := newPRNotificationMutation(c.config, OpDelete)
	return &PRNotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PRNotificationClient) DeleteOne(pn *PRNotification) *PRNotificationDeleteOne {
	return c.DeleteOneID(pn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PRNotificationClient) DeleteOneID(id int) *PRNotificationDeleteOne {
	builder := c.Delete().Where(prnotification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PRNotificationDeleteOne{builder}
}

// Query returns a query builder for PRNotification.
func (c *PRNotificationClient) Query() *PRNotificationQuery {
	return &PRNotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePRNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a PRNotification entity by its id.
func (c *PRNotificationClient) Get(ctx context.Context, id int) (*PRNotification, error) {
	return c.Query().Where(prnotification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PRNotificationClient) GetX(ctx context.Context, id int) *PRNotification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PRNotificationClient) Hooks() []Hook {
	return c.hooks.PRNotification
}

// Interceptors returns the client interceptors.
func (c *PRNotificationClient) Interceptors() []Interceptor {
	return c.inters.PRNotification
}

func (c *PRNotificationClient) mutate(ctx context.Context, m *PRNotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PRNotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PRNotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PRNotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PRNotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PRNotification mutation op: %q", m.Op())
	}
}

// RepositoryClient is a client for the Repository schema.
type RepositoryClient struct {
	config
}

// NewRepositoryClient returns a client for the Repository from the given config.
func NewRepositoryClient(c config) *RepositoryClient {
	return &RepositoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repository.Hooks(f(g(h())))`.
func (c *RepositoryClient) Use(hooks ...Hook) {
	c.hooks.Repository = append(c.hooks.Repository, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `repository.Intercept(f(g(h())))`.
func (c *RepositoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Repository = append(c.inters.Repository, interceptors...)
}

// Create returns a builder for creating a Repository entity.
func (c *RepositoryClient) Create() *RepositoryCreate {
	mutation := newRepositoryMutation(c.config, OpCreate)
	return &RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Repository entities.
func (c *RepositoryClient) CreateBulk(builders ...*RepositoryCreate) *RepositoryCreateBulk {
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RepositoryClient) MapCreateBulk(slice any, setFunc func(*RepositoryCreate, int)) *RepositoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RepositoryCreateBulk{err: fmt.Errorf("calling to RepositoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RepositoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Repository.
func (c *RepositoryClient) Update() *RepositoryUpdate {
	mutation := newRepositoryMutation(c.config, OpUpdate)
	return &RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepositoryClient) UpdateOne(r *Repository) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepository(r))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepositoryClient) UpdateOneID(id int64) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepositoryID(id))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Repository.
func (c *RepositoryClient) Delete() *RepositoryDelete {
	mutation := newRepositoryMutation(c.config, OpDelete)
	return &RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RepositoryClient) DeleteOne(r *Repository) *RepositoryDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RepositoryClient) DeleteOneID(id int64) *RepositoryDeleteOne {
	builder := c.Delete().Where(repository.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepositoryDeleteOne{builder}
}

// Query returns a query builder for Repository.
func (c *RepositoryClient) Query() *RepositoryQuery {
	return &RepositoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRepository},
		inters: c.Interceptors(),
	}
}

// Get returns a Repository entity by its id.
func (c *RepositoryClient) Get(ctx context.Context, id int64) (*Repository, error) {
	return c.Query().Where(repository.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepositoryClient) GetX(ctx context.Context, id int64) *Repository {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a Repository.
func (c *RepositoryClient) QueryOrganization(r *Repository) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repository.OrganizationTable, repository.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommits queries the commits edge of a Repository.
func (c *RepositoryClient) QueryCommits(r *Repository) *GitCommitQuery {
	query := (&GitCommitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(gitcommit.Table, gitcommit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.CommitsTable, repository.CommitsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepositoryClient) Hooks() []Hook {
	return c.hooks.Repository
}

// Interceptors returns the client interceptors.
func (c *RepositoryClient) Interceptors() []Interceptor {
	return c.inters.Repository
}

func (c *RepositoryClient) mutate(ctx context.Context, m *RepositoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Repository mutation op: %q", m.Op())
	}
}

// TelegramChannelStateClient is a client for the TelegramChannelState schema.
type TelegramChannelStateClient struct {
	config
}

// NewTelegramChannelStateClient returns a client for the TelegramChannelState from the given config.
func NewTelegramChannelStateClient(c config) *TelegramChannelStateClient {
	return &TelegramChannelStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `telegramchannelstate.Hooks(f(g(h())))`.
func (c *TelegramChannelStateClient) Use(hooks ...Hook) {
	c.hooks.TelegramChannelState = append(c.hooks.TelegramChannelState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `telegramchannelstate.Intercept(f(g(h())))`.
func (c *TelegramChannelStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.TelegramChannelState = append(c.inters.TelegramChannelState, interceptors...)
}

// Create returns a builder for creating a TelegramChannelState entity.
func (c *TelegramChannelStateClient) Create() *TelegramChannelStateCreate {
	mutation := newTelegramChannelStateMutation(c.config, OpCreate)
	return &TelegramChannelStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TelegramChannelState entities.
func (c *TelegramChannelStateClient) CreateBulk(builders ...*TelegramChannelStateCreate) *TelegramChannelStateCreateBulk {
	return &TelegramChannelStateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TelegramChannelStateClient) MapCreateBulk(slice any, setFunc func(*TelegramChannelStateCreate, int)) *TelegramChannelStateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TelegramChannelStateCreateBulk{err: fmt.Errorf("calling to TelegramChannelStateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TelegramChannelStateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TelegramChannelStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TelegramChannelState.
func (c *TelegramChannelStateClient) Update() *TelegramChannelStateUpdate {
	mutation := newTelegramChannelStateMutation(c.config, OpUpdate)
	return &TelegramChannelStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TelegramChannelStateClient) UpdateOne(tcs *TelegramChannelState) *TelegramChannelStateUpdateOne {
	mutation := newTelegramChannelStateMutation(c.config, OpUpdateOne, withTelegramChannelState(tcs))
	return &TelegramChannelStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TelegramChannelStateClient) UpdateOneID(id int) *TelegramChannelStateUpdateOne {
	mutation := newTelegramChannelStateMutation(c.config, OpUpdateOne, withTelegramChannelStateID(id))
	return &TelegramChannelStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TelegramChannelState.
func (c *TelegramChannelStateClient) Delete() *TelegramChannelStateDelete {
	mutation := newTelegramChannelStateMutation(c.config, OpDelete)
	return &TelegramChannelStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TelegramChannelStateClient) DeleteOne(tcs *TelegramChannelState) *TelegramChannelStateDeleteOne {
	return c.DeleteOneID(tcs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TelegramChannelStateClient) DeleteOneID(id int) *TelegramChannelStateDeleteOne {
	builder := c.Delete().Where(telegramchannelstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TelegramChannelStateDeleteOne{builder}
}

// Query returns a query builder for TelegramChannelState.
func (c *TelegramChannelStateClient) Query() *TelegramChannelStateQuery {
	return &TelegramChannelStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTelegramChannelState},
		inters: c.Interceptors(),
	}
}

// Get returns a TelegramChannelState entity by its id.
func (c *TelegramChannelStateClient) Get(ctx context.Context, id int) (*TelegramChannelState, error) {
	return c.Query().Where(telegramchannelstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TelegramChannelStateClient) GetX(ctx context.Context, id int) *TelegramChannelState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a TelegramChannelState.
func (c *TelegramChannelStateClient) QueryUser(tcs *TelegramChannelState) *TelegramUserStateQuery {
	query := (&TelegramUserStateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tcs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telegramchannelstate.Table, telegramchannelstate.FieldID, id),
			sqlgraph.To(telegramuserstate.Table, telegramuserstate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, telegramchannelstate.UserTable, telegramchannelstate.UserColumn),
		)
		fromV = sqlgraph.Neighbors(tcs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TelegramChannelStateClient) Hooks() []Hook {
	return c.hooks.TelegramChannelState
}

// Interceptors returns the client interceptors.
func (c *TelegramChannelStateClient) Interceptors() []Interceptor {
	return c.inters.TelegramChannelState
}

func (c *TelegramChannelStateClient) mutate(ctx context.Context, m *TelegramChannelStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TelegramChannelStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TelegramChannelStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TelegramChannelStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TelegramChannelStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TelegramChannelState mutation op: %q", m.Op())
	}
}

// TelegramSessionClient is a client for the TelegramSession schema.
type TelegramSessionClient struct {
	config
}

// NewTelegramSessionClient returns a client for the TelegramSession from the given config.
func NewTelegramSessionClient(c config) *TelegramSessionClient {
	return &TelegramSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `telegramsession.Hooks(f(g(h())))`.
func (c *TelegramSessionClient) Use(hooks ...Hook) {
	c.hooks.TelegramSession = append(c.hooks.TelegramSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `telegramsession.Intercept(f(g(h())))`.
func (c *TelegramSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.TelegramSession = append(c.inters.TelegramSession, interceptors...)
}

// Create returns a builder for creating a TelegramSession entity.
func (c *TelegramSessionClient) Create() *TelegramSessionCreate {
	mutation := newTelegramSessionMutation(c.config, OpCreate)
	return &TelegramSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TelegramSession entities.
func (c *TelegramSessionClient) CreateBulk(builders ...*TelegramSessionCreate) *TelegramSessionCreateBulk {
	return &TelegramSessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TelegramSessionClient) MapCreateBulk(slice any, setFunc func(*TelegramSessionCreate, int)) *TelegramSessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TelegramSessionCreateBulk{err: fmt.Errorf("calling to TelegramSessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TelegramSessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TelegramSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TelegramSession.
func (c *TelegramSessionClient) Update() *TelegramSessionUpdate {
	mutation := newTelegramSessionMutation(c.config, OpUpdate)
	return &TelegramSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TelegramSessionClient) UpdateOne(ts *TelegramSession) *TelegramSessionUpdateOne {
	mutation := newTelegramSessionMutation(c.config, OpUpdateOne, withTelegramSession(ts))
	return &TelegramSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TelegramSessionClient) UpdateOneID(id uuid.UUID) *TelegramSessionUpdateOne {
	mutation := newTelegramSessionMutation(c.config, OpUpdateOne, withTelegramSessionID(id))
	return &TelegramSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TelegramSession.
func (c *TelegramSessionClient) Delete() *TelegramSessionDelete {
	mutation := newTelegramSessionMutation(c.config, OpDelete)
	return &TelegramSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TelegramSessionClient) DeleteOne(ts *TelegramSession) *TelegramSessionDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TelegramSessionClient) DeleteOneID(id uuid.UUID) *TelegramSessionDeleteOne {
	builder := c.Delete().Where(telegramsession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TelegramSessionDeleteOne{builder}
}

// Query returns a query builder for TelegramSession.
func (c *TelegramSessionClient) Query() *TelegramSessionQuery {
	return &TelegramSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTelegramSession},
		inters: c.Interceptors(),
	}
}

// Get returns a TelegramSession entity by its id.
func (c *TelegramSessionClient) Get(ctx context.Context, id uuid.UUID) (*TelegramSession, error) {
	return c.Query().Where(telegramsession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TelegramSessionClient) GetX(ctx context.Context, id uuid.UUID) *TelegramSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TelegramSessionClient) Hooks() []Hook {
	return c.hooks.TelegramSession
}

// Interceptors returns the client interceptors.
func (c *TelegramSessionClient) Interceptors() []Interceptor {
	return c.inters.TelegramSession
}

func (c *TelegramSessionClient) mutate(ctx context.Context, m *TelegramSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TelegramSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TelegramSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TelegramSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TelegramSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TelegramSession mutation op: %q", m.Op())
	}
}

// TelegramUserStateClient is a client for the TelegramUserState schema.
type TelegramUserStateClient struct {
	config
}

// NewTelegramUserStateClient returns a client for the TelegramUserState from the given config.
func NewTelegramUserStateClient(c config) *TelegramUserStateClient {
	return &TelegramUserStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `telegramuserstate.Hooks(f(g(h())))`.
func (c *TelegramUserStateClient) Use(hooks ...Hook) {
	c.hooks.TelegramUserState = append(c.hooks.TelegramUserState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `telegramuserstate.Intercept(f(g(h())))`.
func (c *TelegramUserStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.TelegramUserState = append(c.inters.TelegramUserState, interceptors...)
}

// Create returns a builder for creating a TelegramUserState entity.
func (c *TelegramUserStateClient) Create() *TelegramUserStateCreate {
	mutation := newTelegramUserStateMutation(c.config, OpCreate)
	return &TelegramUserStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TelegramUserState entities.
func (c *TelegramUserStateClient) CreateBulk(builders ...*TelegramUserStateCreate) *TelegramUserStateCreateBulk {
	return &TelegramUserStateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TelegramUserStateClient) MapCreateBulk(slice any, setFunc func(*TelegramUserStateCreate, int)) *TelegramUserStateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TelegramUserStateCreateBulk{err: fmt.Errorf("calling to TelegramUserStateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TelegramUserStateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TelegramUserStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TelegramUserState.
func (c *TelegramUserStateClient) Update() *TelegramUserStateUpdate {
	mutation := newTelegramUserStateMutation(c.config, OpUpdate)
	return &TelegramUserStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TelegramUserStateClient) UpdateOne(tus *TelegramUserState) *TelegramUserStateUpdateOne {
	mutation := newTelegramUserStateMutation(c.config, OpUpdateOne, withTelegramUserState(tus))
	return &TelegramUserStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TelegramUserStateClient) UpdateOneID(id int64) *TelegramUserStateUpdateOne {
	mutation := newTelegramUserStateMutation(c.config, OpUpdateOne, withTelegramUserStateID(id))
	return &TelegramUserStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TelegramUserState.
func (c *TelegramUserStateClient) Delete() *TelegramUserStateDelete {
	mutation := newTelegramUserStateMutation(c.config, OpDelete)
	return &TelegramUserStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TelegramUserStateClient) DeleteOne(tus *TelegramUserState) *TelegramUserStateDeleteOne {
	return c.DeleteOneID(tus.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TelegramUserStateClient) DeleteOneID(id int64) *TelegramUserStateDeleteOne {
	builder := c.Delete().Where(telegramuserstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TelegramUserStateDeleteOne{builder}
}

// Query returns a query builder for TelegramUserState.
func (c *TelegramUserStateClient) Query() *TelegramUserStateQuery {
	return &TelegramUserStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTelegramUserState},
		inters: c.Interceptors(),
	}
}

// Get returns a TelegramUserState entity by its id.
func (c *TelegramUserStateClient) Get(ctx context.Context, id int64) (*TelegramUserState, error) {
	return c.Query().Where(telegramuserstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TelegramUserStateClient) GetX(ctx context.Context, id int64) *TelegramUserState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChannels queries the channels edge of a TelegramUserState.
func (c *TelegramUserStateClient) QueryChannels(tus *TelegramUserState) *TelegramChannelStateQuery {
	query := (&TelegramChannelStateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tus.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telegramuserstate.Table, telegramuserstate.FieldID, id),
			sqlgraph.To(telegramchannelstate.Table, telegramchannelstate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, telegramuserstate.ChannelsTable, telegramuserstate.ChannelsColumn),
		)
		fromV = sqlgraph.Neighbors(tus.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TelegramUserStateClient) Hooks() []Hook {
	return c.hooks.TelegramUserState
}

// Interceptors returns the client interceptors.
func (c *TelegramUserStateClient) Interceptors() []Interceptor {
	return c.inters.TelegramUserState
}

func (c *TelegramUserStateClient) mutate(ctx context.Context, m *TelegramUserStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TelegramUserStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TelegramUserStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TelegramUserStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TelegramUserStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TelegramUserState mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Check, GPTDialog, GitCommit, LastChannelMessage, Organization, PRNotification,
		Repository, TelegramChannelState, TelegramSession, TelegramUserState,
		User []ent.Hook
	}
	inters struct {
		Check, GPTDialog, GitCommit, LastChannelMessage, Organization, PRNotification,
		Repository, TelegramChannelState, TelegramSession, TelegramUserState,
		User []ent.Interceptor
	}
)
