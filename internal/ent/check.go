// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-faster/bot/internal/ent/check"
)

// Check is the model entity for the Check schema.
type Check struct {
	config `json:"-"`
	// ID of the ent.
	// Value of check_run.id
	ID int64 `json:"id,omitempty"`
	// Repository id
	RepoID int64 `json:"repo_id,omitempty"`
	// Pull request id
	PullRequestID int `json:"pull_request_id,omitempty"`
	// Name of check_run
	Name string `json:"name,omitempty"`
	// The phase of the lifecycle that the check is currently in. Can be one of: queued, in_progress, completed, pending
	Status string `json:"status,omitempty"`
	// The final conclusion of the check. Can be one of: waiting, pending, startup_failure, stale, success, failure, neutral, cancelled, skipped, timed_out, action_required, null
	Conclusion   string `json:"conclusion,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Check) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case check.FieldID, check.FieldRepoID, check.FieldPullRequestID:
			values[i] = new(sql.NullInt64)
		case check.FieldName, check.FieldStatus, check.FieldConclusion:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Check fields.
func (_m *Check) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case check.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case check.FieldRepoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repo_id", values[i])
			} else if value.Valid {
				_m.RepoID = value.Int64
			}
		case check.FieldPullRequestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pull_request_id", values[i])
			} else if value.Valid {
				_m.PullRequestID = int(value.Int64)
			}
		case check.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case check.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case check.FieldConclusion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conclusion", values[i])
			} else if value.Valid {
				_m.Conclusion = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Check.
// This includes values selected through modifiers, order, etc.
func (_m *Check) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Check.
// Note that you need to call Check.Unwrap() before calling this method if this Check
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Check) Update() *CheckUpdateOne {
	return NewCheckClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Check entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Check) Unwrap() *Check {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Check is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Check) String() string {
	var builder strings.Builder
	builder.WriteString("Check(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("repo_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.RepoID))
	builder.WriteString(", ")
	builder.WriteString("pull_request_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.PullRequestID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("conclusion=")
	builder.WriteString(_m.Conclusion)
	builder.WriteByte(')')
	return builder.String()
}

// Checks is a parsable slice of Check.
type Checks []*Check
