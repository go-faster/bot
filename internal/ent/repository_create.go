// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/bot/internal/ent/gitcommit"
	"github.com/go-faster/bot/internal/ent/organization"
	"github.com/go-faster/bot/internal/ent/repository"
)

// RepositoryCreate is the builder for creating a Repository entity.
type RepositoryCreate struct {
	config
	mutation *RepositoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *RepositoryCreate) SetName(v string) *RepositoryCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetFullName sets the "full_name" field.
func (_c *RepositoryCreate) SetFullName(v string) *RepositoryCreate {
	_c.mutation.SetFullName(v)
	return _c
}

// SetHTMLURL sets the "html_url" field.
func (_c *RepositoryCreate) SetHTMLURL(v string) *RepositoryCreate {
	_c.mutation.SetHTMLURL(v)
	return _c
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (_c *RepositoryCreate) SetNillableHTMLURL(v *string) *RepositoryCreate {
	if v != nil {
		_c.SetHTMLURL(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *RepositoryCreate) SetDescription(v string) *RepositoryCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *RepositoryCreate) SetNillableDescription(v *string) *RepositoryCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetLastPushedAt sets the "last_pushed_at" field.
func (_c *RepositoryCreate) SetLastPushedAt(v time.Time) *RepositoryCreate {
	_c.mutation.SetLastPushedAt(v)
	return _c
}

// SetNillableLastPushedAt sets the "last_pushed_at" field if the given value is not nil.
func (_c *RepositoryCreate) SetNillableLastPushedAt(v *time.Time) *RepositoryCreate {
	if v != nil {
		_c.SetLastPushedAt(*v)
	}
	return _c
}

// SetLastEventAt sets the "last_event_at" field.
func (_c *RepositoryCreate) SetLastEventAt(v time.Time) *RepositoryCreate {
	_c.mutation.SetLastEventAt(v)
	return _c
}

// SetNillableLastEventAt sets the "last_event_at" field if the given value is not nil.
func (_c *RepositoryCreate) SetNillableLastEventAt(v *time.Time) *RepositoryCreate {
	if v != nil {
		_c.SetLastEventAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *RepositoryCreate) SetID(v int64) *RepositoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (_c *RepositoryCreate) SetOrganizationID(id int64) *RepositoryCreate {
	_c.mutation.SetOrganizationID(id)
	return _c
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (_c *RepositoryCreate) SetNillableOrganizationID(id *int64) *RepositoryCreate {
	if id != nil {
		_c = _c.SetOrganizationID(*id)
	}
	return _c
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_c *RepositoryCreate) SetOrganization(v *Organization) *RepositoryCreate {
	return _c.SetOrganizationID(v.ID)
}

// AddCommitIDs adds the "commits" edge to the GitCommit entity by IDs.
func (_c *RepositoryCreate) AddCommitIDs(ids ...string) *RepositoryCreate {
	_c.mutation.AddCommitIDs(ids...)
	return _c
}

// AddCommits adds the "commits" edges to the GitCommit entity.
func (_c *RepositoryCreate) AddCommits(v ...*GitCommit) *RepositoryCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCommitIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (_c *RepositoryCreate) Mutation() *RepositoryMutation {
	return _c.mutation
}

// Save creates the Repository in the database.
func (_c *RepositoryCreate) Save(ctx context.Context) (*Repository, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *RepositoryCreate) SaveX(ctx context.Context) *Repository {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RepositoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RepositoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *RepositoryCreate) defaults() {
	if _, ok := _c.mutation.Description(); !ok {
		v := repository.DefaultDescription
		_c.mutation.SetDescription(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *RepositoryCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Repository.name"`)}
	}
	if _, ok := _c.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Repository.full_name"`)}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Repository.description"`)}
	}
	return nil
}

func (_c *RepositoryCreate) sqlSave(ctx context.Context) (*Repository, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *RepositoryCreate) createSpec() (*Repository, *sqlgraph.CreateSpec) {
	var (
		_node = &Repository{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(repository.Table, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.FullName(); ok {
		_spec.SetField(repository.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := _c.mutation.HTMLURL(); ok {
		_spec.SetField(repository.FieldHTMLURL, field.TypeString, value)
		_node.HTMLURL = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.LastPushedAt(); ok {
		_spec.SetField(repository.FieldLastPushedAt, field.TypeTime, value)
		_node.LastPushedAt = value
	}
	if value, ok := _c.mutation.LastEventAt(); ok {
		_spec.SetField(repository.FieldLastEventAt, field.TypeTime, value)
		_node.LastEventAt = value
	}
	if nodes := _c.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.OrganizationTable,
			Columns: []string{repository.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_repositories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.CommitsTable,
			Columns: []string{repository.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gitcommit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Repository.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RepositoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *RepositoryCreate) OnConflict(opts ...sql.ConflictOption) *RepositoryUpsertOne {
	_c.conflict = opts
	return &RepositoryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RepositoryCreate) OnConflictColumns(columns ...string) *RepositoryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RepositoryUpsertOne{
		create: _c,
	}
}

type (
	// RepositoryUpsertOne is the builder for "upsert"-ing
	//  one Repository node.
	RepositoryUpsertOne struct {
		create *RepositoryCreate
	}

	// RepositoryUpsert is the "OnConflict" setter.
	RepositoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *RepositoryUpsert) SetName(v string) *RepositoryUpsert {
	u.Set(repository.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateName() *RepositoryUpsert {
	u.SetExcluded(repository.FieldName)
	return u
}

// SetFullName sets the "full_name" field.
func (u *RepositoryUpsert) SetFullName(v string) *RepositoryUpsert {
	u.Set(repository.FieldFullName, v)
	return u
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateFullName() *RepositoryUpsert {
	u.SetExcluded(repository.FieldFullName)
	return u
}

// SetHTMLURL sets the "html_url" field.
func (u *RepositoryUpsert) SetHTMLURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldHTMLURL, v)
	return u
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateHTMLURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldHTMLURL)
	return u
}

// ClearHTMLURL clears the value of the "html_url" field.
func (u *RepositoryUpsert) ClearHTMLURL() *RepositoryUpsert {
	u.SetNull(repository.FieldHTMLURL)
	return u
}

// SetDescription sets the "description" field.
func (u *RepositoryUpsert) SetDescription(v string) *RepositoryUpsert {
	u.Set(repository.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateDescription() *RepositoryUpsert {
	u.SetExcluded(repository.FieldDescription)
	return u
}

// SetLastPushedAt sets the "last_pushed_at" field.
func (u *RepositoryUpsert) SetLastPushedAt(v time.Time) *RepositoryUpsert {
	u.Set(repository.FieldLastPushedAt, v)
	return u
}

// UpdateLastPushedAt sets the "last_pushed_at" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateLastPushedAt() *RepositoryUpsert {
	u.SetExcluded(repository.FieldLastPushedAt)
	return u
}

// ClearLastPushedAt clears the value of the "last_pushed_at" field.
func (u *RepositoryUpsert) ClearLastPushedAt() *RepositoryUpsert {
	u.SetNull(repository.FieldLastPushedAt)
	return u
}

// SetLastEventAt sets the "last_event_at" field.
func (u *RepositoryUpsert) SetLastEventAt(v time.Time) *RepositoryUpsert {
	u.Set(repository.FieldLastEventAt, v)
	return u
}

// UpdateLastEventAt sets the "last_event_at" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateLastEventAt() *RepositoryUpsert {
	u.SetExcluded(repository.FieldLastEventAt)
	return u
}

// ClearLastEventAt clears the value of the "last_event_at" field.
func (u *RepositoryUpsert) ClearLastEventAt() *RepositoryUpsert {
	u.SetNull(repository.FieldLastEventAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(repository.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RepositoryUpsertOne) UpdateNewValues() *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(repository.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Repository.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RepositoryUpsertOne) Ignore() *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RepositoryUpsertOne) DoNothing() *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RepositoryCreate.OnConflict
// documentation for more info.
func (u *RepositoryUpsertOne) Update(set func(*RepositoryUpsert)) *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RepositoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RepositoryUpsertOne) SetName(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateName() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateName()
	})
}

// SetFullName sets the "full_name" field.
func (u *RepositoryUpsertOne) SetFullName(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateFullName() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateFullName()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *RepositoryUpsertOne) SetHTMLURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateHTMLURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHTMLURL()
	})
}

// ClearHTMLURL clears the value of the "html_url" field.
func (u *RepositoryUpsertOne) ClearHTMLURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearHTMLURL()
	})
}

// SetDescription sets the "description" field.
func (u *RepositoryUpsertOne) SetDescription(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateDescription() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDescription()
	})
}

// SetLastPushedAt sets the "last_pushed_at" field.
func (u *RepositoryUpsertOne) SetLastPushedAt(v time.Time) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLastPushedAt(v)
	})
}

// UpdateLastPushedAt sets the "last_pushed_at" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateLastPushedAt() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLastPushedAt()
	})
}

// ClearLastPushedAt clears the value of the "last_pushed_at" field.
func (u *RepositoryUpsertOne) ClearLastPushedAt() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearLastPushedAt()
	})
}

// SetLastEventAt sets the "last_event_at" field.
func (u *RepositoryUpsertOne) SetLastEventAt(v time.Time) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLastEventAt(v)
	})
}

// UpdateLastEventAt sets the "last_event_at" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateLastEventAt() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLastEventAt()
	})
}

// ClearLastEventAt clears the value of the "last_event_at" field.
func (u *RepositoryUpsertOne) ClearLastEventAt() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearLastEventAt()
	})
}

// Exec executes the query.
func (u *RepositoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RepositoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RepositoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RepositoryUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RepositoryUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RepositoryCreateBulk is the builder for creating many Repository entities in bulk.
type RepositoryCreateBulk struct {
	config
	err      error
	builders []*RepositoryCreate
	conflict []sql.ConflictOption
}

// Save creates the Repository entities in the database.
func (_c *RepositoryCreateBulk) Save(ctx context.Context) ([]*Repository, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Repository, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *RepositoryCreateBulk) SaveX(ctx context.Context) []*Repository {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Repository.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RepositoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *RepositoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *RepositoryUpsertBulk {
	_c.conflict = opts
	return &RepositoryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RepositoryCreateBulk) OnConflictColumns(columns ...string) *RepositoryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RepositoryUpsertBulk{
		create: _c,
	}
}

// RepositoryUpsertBulk is the builder for "upsert"-ing
// a bulk of Repository nodes.
type RepositoryUpsertBulk struct {
	create *RepositoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(repository.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RepositoryUpsertBulk) UpdateNewValues() *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(repository.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RepositoryUpsertBulk) Ignore() *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RepositoryUpsertBulk) DoNothing() *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RepositoryCreateBulk.OnConflict
// documentation for more info.
func (u *RepositoryUpsertBulk) Update(set func(*RepositoryUpsert)) *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RepositoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RepositoryUpsertBulk) SetName(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateName() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateName()
	})
}

// SetFullName sets the "full_name" field.
func (u *RepositoryUpsertBulk) SetFullName(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateFullName() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateFullName()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *RepositoryUpsertBulk) SetHTMLURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateHTMLURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHTMLURL()
	})
}

// ClearHTMLURL clears the value of the "html_url" field.
func (u *RepositoryUpsertBulk) ClearHTMLURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearHTMLURL()
	})
}

// SetDescription sets the "description" field.
func (u *RepositoryUpsertBulk) SetDescription(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateDescription() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDescription()
	})
}

// SetLastPushedAt sets the "last_pushed_at" field.
func (u *RepositoryUpsertBulk) SetLastPushedAt(v time.Time) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLastPushedAt(v)
	})
}

// UpdateLastPushedAt sets the "last_pushed_at" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateLastPushedAt() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLastPushedAt()
	})
}

// ClearLastPushedAt clears the value of the "last_pushed_at" field.
func (u *RepositoryUpsertBulk) ClearLastPushedAt() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearLastPushedAt()
	})
}

// SetLastEventAt sets the "last_event_at" field.
func (u *RepositoryUpsertBulk) SetLastEventAt(v time.Time) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLastEventAt(v)
	})
}

// UpdateLastEventAt sets the "last_event_at" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateLastEventAt() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLastEventAt()
	})
}

// ClearLastEventAt clears the value of the "last_event_at" field.
func (u *RepositoryUpsertBulk) ClearLastEventAt() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearLastEventAt()
	})
}

// Exec executes the query.
func (u *RepositoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RepositoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RepositoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RepositoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
